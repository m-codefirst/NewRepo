@using EPiServer.Editor
@using TRM.Web.Constants
@using TRM.Web.Models.Layouts
@using TRM.Shared.Extensions
@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.Bullion.BullionCustomerBankAccountPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.Bullion.CustomerBankAccount.LinkedBankAccountsViewModel>
@{
    var myLayout = Model.Layout as TrmLayoutModel;
    if (myLayout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }

    @Html.FullRefreshPropertiesMetaData(new[] { "ThreeContentAreas" })
    var mainClass = Model.CurrentPage.ShowMyLeftMenu ? "col-xs-12 col-md-9 col-md-push-3" : "container";
}
<div class="contentArea">
    <div class="row" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
        @Html.DisplayFor(m => m.CurrentPage.ThreeContentAreas.TopContent)
    </div>
</div>

@if (!myLayout.HideSiteBreadcrumb)
{
    <div class="container">
        @Html.Partial("_Breadcrumb", myLayout.Breadcrumb)
    </div>
}

@if (myLayout.HasMessage)
{
    Html.RenderPartial("_MessageBox", myLayout.Message);
}
@{
    var menuLabel = Html.TranslateFallback(StringResources.LeftMenuMobileText, StringConstants.TranslationFallback.Menu);

    if (!string.IsNullOrWhiteSpace(Model.CurrentPage.MenuButtonTextXs))
    {
        menuLabel = Model.CurrentPage.MenuButtonTextXs;
    }

}
<div class="container linked-bank-accounts">
    @if (Model.CurrentPage.FullWidthPageHeading)
    {
        @Html.Partial("_PageHeader", myLayout)
    }
    <main class="@mainClass" id="content">
        @if (!Model.CurrentPage.FullWidthPageHeading)
        {
            @Html.Partial("_PageHeader", myLayout)
        }
        @if (Model.CurrentPage.ShowMyLeftMenu)
        {<div class="row">
                <div class="col-sm-4 hidden-md hidden-lg">
                    <a class="btn btn-default btn-block sidenav-trigger mb-2x" data-target="#pageMenu">@menuLabel</a>
                </div>
            </div>
        }
        @if ((Model.CurrentPage.MainBody != null && !Model.CurrentPage.MainBody.IsEmpty) || PageEditing.PageIsInEditMode)
        {
            <div class="xhtmlArea clear" @Html.EditAttributes(m => m.CurrentPage.MainBody)>
                @{ var content = Html.ParseXhtmlString(Model.CurrentPage.MainBody); }
                @Html.DisplayFor(m => content)
            </div>
        }
        <div class="contentArea" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
            <div class="row">
                @Html.DisplayFor(m => m.CurrentPage.ThreeContentAreas.MiddleContent)
            </div>
        </div>

        <div class="panel panel-default panel-secondary">
            <div class="panel-body item-row">

                <div class="row">
                    <div class="col-xs-12">
                        @Html.Raw(Model.CurrentPage.ViewBankAccountIntroText)
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.ViewModel.AddedAccountMessage))
                {
                    <div class="alert alert-success text-center mb-1x mt-1x">
                        @Model.ViewModel.AddedAccountMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.ViewModel.EditedAccountMessage))
                {
                    <div class="alert alert-success text-center mb-1x mt-1x">
                        @Model.ViewModel.EditedAccountMessage
                    </div>
                }
                @{
                    var bankHasAction = !(string.IsNullOrEmpty(Model.CurrentPage.ActionDeleteText) && string.IsNullOrEmpty(Model.CurrentPage.ActionEditText));
                }
                <div class="panel panel-order">
                    <!-- Panel Heading -->
                    @if (Model.ViewModel.BankAccounts.Any())
                    {
                        <div class="panel-heading hidden-xs">
                            <div class="row">
                                <div class="col-xs-12 @(bankHasAction ? "col-sm-4" : "col-sm-6")">
                                    @Model.CurrentPage.AccountHolderText
                                </div>
                                <div class="col-xs-12 col-sm-6">
                                    @Model.CurrentPage.AccountNicknameText
                                </div>
                                @if (bankHasAction)
                                {
                                    <div class="col-xs-12 col-sm-2 text-right">
                                        @Model.CurrentPage.ActionText
                                    </div>
                                }
                            </div>
                        </div>
                        foreach (var bankAccount in Model.ViewModel.BankAccounts)
                        {
                            <div class="panel-body item-row">
                                <div class="row mb-xs-1x">
                                    <div class="col-xs-12 @(bankHasAction ? "col-sm-4" : "col-sm-6")">
                                        <span class="visible-xs-inline strong">@(Model.CurrentPage.AccountHolderText):</span>
                                        <span class="linked-mobile-block">@bankAccount.AccountHolderName</span>
                                    </div>
                                    <div class="col-xs-12 col-sm-5">
                                        <span class="visible-xs-inline strong">@(Model.CurrentPage.AccountNicknameText):</span>
                                        <span class="linked-mobile-block">@bankAccount.AccountNickName</span>
                                    </div>
                                    @if (bankHasAction)
                                    {
                                        <div class="col-xs-12 col-sm-3 text-left-xs text-right-sm">
                                            <span class="visible-xs-inline strong">@(Model.CurrentPage.ActionText):</span>
                                            @if (!string.IsNullOrEmpty(Model.CurrentPage.ActionDeleteText))
                                            {
                                                @Html.ActionLink(Model.CurrentPage.ActionDeleteText, "Remove", new { bankAccountId = bankAccount.Id }, new { @class = string.IsNullOrEmpty(Model.CurrentPage.ActionEditText) ? "text-danger" : "text-danger pl-xs-1x pr-2x" })
                                            }
                                            @if (!string.IsNullOrEmpty(Model.CurrentPage.ActionEditText))
                                            {
                                                @Html.ActionLink(Model.CurrentPage.ActionEditText, "Edit", new { bankAccountId = bankAccount.Id })
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }

                    <div class="row">
                        <div class="col-xs-12 text-right">
                            @Html.ActionLink(Model.CurrentPage.AddBankAccountButtonText, "AddBankAccount", null, new { @class = "btn btn-secondary mt-2x" })
                        </div>
                    </div>
                    @if (Model.CurrentPage.LinkedBankAccountsContentArea != null || PageEditing.PageIsInEditMode)
                    {
                        <div class="row mt-1x">
                            @Html.PropertyFor(x => x.CurrentPage.LinkedBankAccountsContentArea)
                        </div>
                    }

                </div>
            </div>
        </div>
    </main>
    @if (Model.CurrentPage.ShowMyLeftMenu)
    {
        <aside class="col-xs-12 col-sm-3 col-sm-pull-9">
            <div class="row">
                @{
                    if (Model.CurrentPage.ShowManualLeftNavigation)
                    {
                        Html.RenderPartial("_ManualLeftMenu", myLayout);
                    }

                    if (Model.CurrentPage.ShowAutomaticLeftNavigation)
                    {
                        Html.RenderPartial("_AutomaticLeftMenu", myLayout);
                    }
                }
            </div>
            <div class="row">
                @Html.PropertyFor(m => m.CurrentPage.BottomNavContentArea)
            </div>
        </aside>
    }
</div>

<div class="contentArea" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
    <div class="row">
        @Html.DisplayFor(m => m.CurrentPage.ThreeContentAreas.BottomContent)
    </div>
</div>
