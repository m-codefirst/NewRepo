@using TRM.Shared.Extensions;
@using EPiServer.Web.Mvc.Html
@using TRM.Web.Constants
@using TRM.Web.Models.Layouts

@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.CheckoutPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.Checkout.CheckoutStep2ViewModel>

@{
    var myLayout = Model.Layout as TrmLayoutModel;
    if (myLayout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }

    var url = string.Empty;
    if (Request != null && Request.Url != null)
    {
        var trmLayout = (TrmLayoutModel)Model.Layout;
        url = trmLayout.CheckoutPage.GetExternalUrl_V2();
    }
    var isLoggedIn = Request.IsAuthenticated;
    var thisFeedbackClass = string.Empty;
}

@functions
{
    public bool FieldHasErrors(string fieldName)
    {
        return (ViewData.ModelState[fieldName] != null && ViewData.ModelState[fieldName].Errors.Any());
    }
}

@helper ErrorMessage(MvcHtmlString error)
{
    <span class="trmi trmi-close form-control-feedback" aria-hidden="true"></span>
    <span class="help-block">
        @error
    </span>
}

@helper PasswordErrorMessage(MvcHtmlString error)
{
    <span class="help-block">
        @error
    </span>
}

<div class="pageContainer">
    <div class="content-area"></div>
    <div class="container mb-4x mt-2x">
        @if (Model.CurrentPage.DisplayPageHeading)
        {
            <div class="page-header">
                <h1 class="h2">@Html.PropertyFor(m => m.CurrentPage.Heading)</h1>
            </div>
        }
        <ol class="nav nav-bar nav-progress-bar mb-2x">
            <li><a href="@url">@Html.DisplayFor(m => m.CurrentPage.Step1Number) <span>@Html.DisplayFor(m => m.CurrentPage.Step1Heading)</span></a></li>
            @if (!isLoggedIn)
            {
                <li class="active"><a href="#">@Html.DisplayFor(m => m.CurrentPage.Step2Number) <span> @Html.DisplayFor(m => m.CurrentPage.Step2Heading) </span></a></li>
            }
            <li>@(isLoggedIn ? Html.DisplayFor(m => m.CurrentPage.Step2Number) : Html.DisplayFor(m => m.CurrentPage.Step3Number)) <span> @Html.DisplayFor(m => m.CurrentPage.Step3Heading) </span> </li>
            <li>@(isLoggedIn ? Html.DisplayFor(m => m.CurrentPage.Step3Number) : Html.DisplayFor(m => m.CurrentPage.Step4Number)) <span> @Html.DisplayFor(m => m.CurrentPage.Step4Heading) </span> </li>
            <li>@(isLoggedIn ? Html.DisplayFor(m => m.CurrentPage.Step4Number) : Html.DisplayFor(m => m.CurrentPage.Step5Number)) <span> @Html.DisplayFor(m => m.CurrentPage.Step5Heading) </span> </li>
        </ol>
        <main class="row">
            <div class="col-xs-12 col-sm-7 mb-2x">
                <h3 class="mt-0">@Html.PropertyFor(m => m.CurrentPage.Step2ContentHeading)</h3>
                @if (Request.IsAuthenticated)
                {
                    using (Html.BeginForm("CheckoutStep3", null, null, FormMethod.Post, new { id = "aboutYouForm", @class = "width-80" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label class="control-label" for="checkoutTitle">@Html.DisplayFor(m => m.CurrentPage.Step2TitleLabel)</label>
                            <input type="text" class="form-control" id="checkoutTitle" placeholder="@Html.DisplayFor(m => m.CurrentPage.Step2TitlePlaceholder)" value="@Model.ViewModel.ExistingTitle" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="checkoutFName">@Html.DisplayFor(m => m.CurrentPage.Step2FirstNameLabel)</label>
                            <input type="text" class="form-control" id="checkoutFName" placeholder="@Html.DisplayFor(m => m.CurrentPage.Step2FirstNamePlaceholder)" value="@Model.ViewModel.ExistingFirstName" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="checkoutSurname">@Html.DisplayFor(m => m.CurrentPage.Step2LastNameLabel)</label>
                            <input type="text" class="form-control" id="checkoutSurname" placeholder="@Html.DisplayFor(m => m.CurrentPage.Step2LastNamePlaceholder)" value="@Model.ViewModel.ExisttingLastName" />

                        </div>
                        <div class="form-group">
                            <label class="control-label" for="checkoutEmail">@Html.DisplayFor(m => m.CurrentPage.Step2EmailLabel)</label>
                            <input type="text" class="form-control" id="checkoutEmail" placeholder="@Html.DisplayFor(m => m.CurrentPage.Step2EmailPlaceholder)" value="@Model.ViewModel.ExistingEmailAddress" />
                        </div>

                        <button type="submit" class="btn btn-secondary mb-1x">@Html.DisplayFor(m => m.CurrentPage.NextButtonText)</button>
                        <p>@Html.PropertyFor(m => m.CurrentPage.Step2NextStepLabel)</p>
                    }
                }
                else
                {
                    if (Model.ViewModel.IsAmlTriggered)
                    {
                        @Html.Raw(Model.CurrentPage.Step2AmlTriggeredMessage)
                    }

                    const string feedbackClass = "has-error has-feedback";

                    using (Html.BeginForm("CheckoutStep2", null, FormMethod.Post, new { @class = "width-80 ng-pristine ng-invalid ng-invalid-required", name = "aboutYouNewUser", id = "aboutYouNewUser" }))
                    {
                        @Html.HiddenFor(m => m.ViewModel.IsAmlTriggered)

                        thisFeedbackClass = string.Empty;
                        if (FieldHasErrors("viewModel.Title"))
                        {
                            thisFeedbackClass = feedbackClass;
                        }
                        <div class="form-group @thisFeedbackClass">
                            <label class="control-label" for="Title">@Html.DisplayFor(m => m.CurrentPage.Step2TitleLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>

                            <div class="select-form">
                                @Html.DropDownListFor(x => x.ViewModel.Title, new SelectList(Model.ViewModel.TitleList), new { @class = "form-control", @name = "Title", @id = "Title" })
                            </div>
                            @if (!string.IsNullOrEmpty(thisFeedbackClass))
                            {
                                @PasswordErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.Title))
                            }
                        </div>

                        thisFeedbackClass = string.Empty;
                        if (FieldHasErrors("viewModel.FirstName"))
                        {
                            thisFeedbackClass = feedbackClass;
                        }
                        <div class="form-group @thisFeedbackClass">
                            <label class="control-label" for="registerFName">@Html.DisplayFor(m => m.CurrentPage.Step2FirstNameLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>
                            @Html.TextBoxFor(x => x.ViewModel.FirstName, new { @class = "form-control", @id = "registerFName", @name = "FirstName" })
                            @if (!string.IsNullOrEmpty(thisFeedbackClass))
                            {
                                @ErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.FirstName))
                            }
                        </div>

                        // show if aml triggered
                        if (Model.ViewModel.IsAmlTriggered)
                        {
                            thisFeedbackClass = string.Empty;
                            if (FieldHasErrors("viewModel.MiddleName"))
                            {
                                thisFeedbackClass = feedbackClass;
                            }
                            <div class="form-group @thisFeedbackClass">
                                <label class="control-label" for="registerMName">@Html.DisplayFor(m => m.CurrentPage.Step2MiddleNameLabel)</label>
                                @Html.TextBoxFor(x => x.ViewModel.MiddleName, new { @class = "form-control", @id = "registerMName", @name = "MiddleName" })
                                @if (!string.IsNullOrEmpty(thisFeedbackClass))
                                {
                                    @ErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.MiddleName))
                                }
                            </div>
                        }

                        thisFeedbackClass = string.Empty;
                        if (FieldHasErrors("viewModel.LastName"))
                        {
                            thisFeedbackClass = feedbackClass;
                        }
                        <div class="form-group @thisFeedbackClass">
                            <label class="control-label" for="registerSurname">@Html.DisplayFor(m => m.CurrentPage.Step2LastNameLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>
                            @Html.TextBoxFor(x => x.ViewModel.LastName, new { @class = "form-control", @id = "registerSurname", @name = "LastName" })
                            @if (!string.IsNullOrEmpty(thisFeedbackClass))
                            {
                                @ErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.LastName))
                            }
                        </div>

                        // show if aml triggered
                        if (Model.ViewModel.IsAmlTriggered)
                        {
                            thisFeedbackClass = string.Empty;
                            if (FieldHasErrors("viewModel.SecondLastName"))
                            {
                                thisFeedbackClass = feedbackClass;
                            }
                            <div class="form-group @thisFeedbackClass">
                                <label class="control-label" for="registerSLName">@Html.DisplayFor(m => m.CurrentPage.Step2SecondLastNameLabel)</label>
                                @Html.TextBoxFor(x => x.ViewModel.SecondLastName, new { @class = "form-control", @id = "registerSLName", @name = "SecondLastName" })
                                @if (!string.IsNullOrEmpty(thisFeedbackClass))
                                {
                                    @ErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.SecondLastName))
                                }
                            </div>
                        }

                        // show if aml triggered
                        if (Model.ViewModel.IsAmlTriggered)
                        {
                            thisFeedbackClass = string.Empty;
                            if (FieldHasErrors("viewModel.Gender"))
                            {
                                thisFeedbackClass = feedbackClass;
                            }
                            <div class="form-group @thisFeedbackClass">
                                <label class="control-label" for="registerGender">@Html.DisplayFor(m => m.CurrentPage.Step2GenderLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>
                                <div class="select-form">
                                    @Html.DropDownListFor(x => x.ViewModel.Gender, new SelectList(Model.ViewModel.GenderList), new { @class = "form-control", @id = "registerGender", @name = "Gender" })
                                </div>
                                @if (!string.IsNullOrEmpty(thisFeedbackClass))
                                {
                                    @PasswordErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.Gender))
                                }
                            </div>
                        }

                        //show if aml triggered
                        if (Model.ViewModel.IsAmlTriggered)
                        {
                            thisFeedbackClass = string.Empty;
                            if (FieldHasErrors("viewModel.DateOfBirth"))
                            {
                                thisFeedbackClass = feedbackClass;
                            }
                            <div class="form-group select-form-group @thisFeedbackClass">
                                <label class="control-label" for="dobDay">
                                    @Html.PropertyFor(a => a.CurrentPage.Step2DateOfBirthLabel)
                                    <span class="text-danger">*</span>
                                    <small class="text-greyblue">@Html.PropertyFor(a => a.CurrentPage.Step2DateOfBirthMessage)</small>
                                </label>
                                <div class="row">
                                    <div class="col-xs-4">
                                        <div class="select-form dob">
                                            @Html.DropDownListFor(x => x.ViewModel.DateOfBirth.Day, new SelectList(Model.ViewModel.DayList, "Key", "Value"), new { @class = "form-control" })
                                        </div>
                                    </div>
                                    <div class="col-xs-4">
                                        <div class="select-form dob">
                                            @Html.DropDownListFor(x => x.ViewModel.DateOfBirth.Month, new SelectList(Model.ViewModel.MonthList, "Key", "Value"), new { @class = "form-control" })
                                        </div>
                                    </div>
                                    <div class="col-xs-4">
                                        <div class="select-form dob">
                                            @Html.DropDownListFor(x => x.ViewModel.DateOfBirth.Year, new SelectList(Model.ViewModel.YearList, "Key", "Value"), new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(thisFeedbackClass))
                                {
                                    @PasswordErrorMessage(Html.ValidationMessageFor(m => m.ViewModel.DateOfBirth))
                                }
                            </div>
                        }

                        thisFeedbackClass = string.Empty;
                        if (FieldHasErrors("viewModel.Telephone"))
                        {
                            thisFeedbackClass = feedbackClass;
                        }
                        <div class="form-group @thisFeedbackClass">
                            <label class="control-label" for="registerTel">@Html.DisplayFor(m => m.CurrentPage.Step2TelephoneNumberLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>
                            @Html.TextBoxFor(x => x.ViewModel.Telephone, new { @class = "form-control", id = "registerTel", @name = "Telephone" })
                            @if (!string.IsNullOrEmpty(thisFeedbackClass))
                            {
                                @ErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.Telephone))
                            }
                        </div>

                        thisFeedbackClass = string.Empty;
                        if (FieldHasErrors("viewModel.EmailAddress"))
                        {
                            thisFeedbackClass = feedbackClass;
                        }
                        <div class="form-group @thisFeedbackClass">
                            <label class="control-label" for="registerEmail">@Html.DisplayFor(m => m.CurrentPage.Step2EmailLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>
                            @Html.TextBoxFor(x => x.ViewModel.EmailAddress, new { @class = "form-control", id = "registerEmail" })
                            @if (!string.IsNullOrEmpty(thisFeedbackClass))
                            {
                                @ErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.EmailAddress))
                            }
                            @foreach (var error in Model.ViewModel.Errors)
                            {
                                <span class="help-block">
                                    @Html.Raw(error)
                                </span>
                            }
                        </div>

                        thisFeedbackClass = string.Empty;
                        if (FieldHasErrors("viewModel.EmailAddress2"))
                        {
                            thisFeedbackClass = "has-error has-feedback";
                        }
                        <div class="form-group @thisFeedbackClass">
                            <label class="control-label" for="confirmEmail">@Html.DisplayFor(m => m.CurrentPage.Step2EmailConfirmLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>
                            @Html.TextBoxFor(x => x.ViewModel.EmailAddress2, new { @class = "form-control", id = "confirmEmail" })
                            @if (!string.IsNullOrEmpty(thisFeedbackClass))
                            {
                                @ErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.EmailAddress2))
                            }
                        </div>

                        if (!Request.IsAuthenticated)
                        {
                            //show if aml triggered
                            if (Model.ViewModel.IsAmlTriggered)
                            {
                                thisFeedbackClass = string.Empty;
                                if (FieldHasErrors("viewModel.Password"))
                                {
                                    thisFeedbackClass = "has-error has-feedback";
                                }
                                <div class="form-group @thisFeedbackClass">
                                    <label class="control-label" for="registerUsrPW1-main">@Html.DisplayFor(m => m.CurrentPage.Step2PasswordLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>
                                    <div>
                                        @Html.PasswordFor(x => x.ViewModel.Password, new { @class = "form-control ok-password", @id = "registerUsrPW1-main", @ng_model = "password" })
                                        <div class="label password-count" ng-class="password.length > 7 ? 'label-success' : 'label-danger'" ng-show="password.length > 0" ng-cloak>{{pwStrengthLabel}} ({{ password | passwordCount:7 }})</div>
                                        <div class="strength-meter" ng-show="password.length > 0" ng-cloak>
                                            <div class="strength-meter-fill" data-strength="{{passwordStrength}}"></div>
                                        </div>
                                        @if (!string.IsNullOrEmpty(thisFeedbackClass))
                                        {
                                            @PasswordErrorMessage(@Html.ValidationMessageFor(x => x.ViewModel.Password))
                                        }
                                    </div>
                                </div>
                            }

                            //show if aml triggered
                            if (Model.ViewModel.IsAmlTriggered)
                            {
                                thisFeedbackClass = string.Empty;
                                if (FieldHasErrors("viewModel.ConfirmPassword"))
                                {
                                    thisFeedbackClass = "has-error has-feedback";
                                }
                                <div class="form-group @thisFeedbackClass">
                                    <label class="control-label" for="confirmPassword">@Html.DisplayFor(m => m.CurrentPage.Step2PasswordConfirmLabel) <span class="text-danger">@Html.TranslateFallback(StringResources.FormRequiredAsterisk, "*")</span></label>
                                    @Html.PasswordFor(x => x.ViewModel.ConfirmPassword, new { @class = "form-control", id = "confirmPassword" })
                                    @if (!string.IsNullOrEmpty(thisFeedbackClass))
                                    {
                                        @PasswordErrorMessage(Html.ValidationMessageFor(x => x.ViewModel.ConfirmPassword))
                                    }
                                </div>
                            }
                        }

                        if (!string.IsNullOrEmpty(Model.ViewModel.AccountCreateFailedMessage))
                        {
                            <span class="help-block">
                                @Model.ViewModel.AccountCreateFailedMessage
                            </span>
                        }

                        <button disableonclick type = "submit" class="btn btn-secondary mb-1x">@Html.DisplayFor(m => m.CurrentPage.NextButtonText)</button>
                        <p>@Html.PropertyFor(m => m.CurrentPage.Step2NextStepLabel)</p>
                    }
                }
            </div>

            <div class="col-xs-12 col-sm-5 mb-2x">
                @Html.Partial("_BasketSummary", Model.CurrentPage)
                @if(Model.CurrentPage.Step2RightContentArea != null)
                {
                    <div class="row mt-2x">
                        @Html.DisplayFor(x => x.CurrentPage.Step2RightContentArea)
                    </div>
                }
            </div>
            @*<div class="contentArea clear" @Html.EditAttributes(m => m.CurrentPage.CheckoutFooterContentArea)>
                <div class="row">
                    @Html.DisplayFor(m => m.CurrentPage.CheckoutFooterContentArea)
                </div>
            </div>*@
        </main>
    </div>
</div>
