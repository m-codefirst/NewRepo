@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.ResetPasswordPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.ResetPasswordViewModel>

@functions
{
    public bool FieldHasErrors(string fieldName)
    {
        return (ViewData.ModelState[fieldName] != null && ViewData.ModelState[fieldName].Errors.Any());
    }

}

@helper ErrorMessage(MvcHtmlString error)
{
    <span class="trmi trmi-close form-control-feedback" aria-hidden="true"></span>
    <span class="help-block">
        @error
    </span>
}

@helper PasswordErrorMessage(MvcHtmlString error)
{
    <span class="help-block">
        @error
    </span>
}

@{
    string feedbackClass = "has-error has-feedback";
    string thisFeedbackClass = string.Empty;
}

<div class="container mt-2x mb-4x">
    <div class="page-header">
        <h1>@Html.PropertyFor(a => a.CurrentPage.PageHeading)</h1>
    </div>
    <!-- WYSIWYG -->
    <div class="wysiwyg">
        @Html.PropertyFor(a => a.CurrentPage.Introtext)
    </div>
    <!-- WYSIWYG End -->
    <div class="row">
        <div class="col-xs-12 col-sm-6 col-md-5">
            <div class="row">
                <div class="col-xs-12">
                    @using (Html.BeginForm("Index", null, FormMethod.Post, new { @ng_controller = "FormController" }))
                    {
                        @Html.AntiForgeryToken()

                        @Html.HiddenFor(a => a.ViewModel.Token)
                        @Html.HiddenFor(a => a.ViewModel.UserName)

                        if (FieldHasErrors("viewModel.Password1"))
                        {
                            thisFeedbackClass = feedbackClass;
                        }

                        <div class="form-group mb-1x input-subtle  @thisFeedbackClass">
                            <label class="sr-only" for="resetPassword">@Html.PropertyFor(a => a.CurrentPage.EnterPasswordPlaceholder)</label>
                            @Html.PasswordFor(x => x.ViewModel.Password1, new { @class = "form-control ok-password", @placeholder = Model.CurrentPage.EnterPasswordPlaceholder, @id = "registerUsrPW1-main", @ng_class = "(joinTeamForm.password.$dirty && joinTeamForm.password.$invalid) ? 'error' : ''", @ng_required = "true", @ng_model = "password" })

                            <div class="label password-count" ng-class="password.length > 8 ? 'label-success' : 'label-danger'" ng-show="password.length > 0" ng-cloak>{{pwStrengthLabel}} ({{ password | passwordCount:8 }})</div>
                            <div class="strength-meter" ng-show="password.length > 0" ng-cloak>
                                <div class="strength-meter-fill" data-strength="{{passwordStrength}}"></div>
                            </div>

                            @if (!string.IsNullOrEmpty(thisFeedbackClass))
                            {
                                @PasswordErrorMessage(@Html.ValidationMessageFor(x => x.ViewModel.Password1))
                            }
                        </div>

                        thisFeedbackClass = string.Empty;

                        if (FieldHasErrors("viewModel.Password2"))
                        {
                            thisFeedbackClass = feedbackClass;
                        }


                        <div class="form-group mb-2x input-subtle  @thisFeedbackClass">
                            <label class="sr-only" for="confirmPassword">@Html.PropertyFor(a => a.CurrentPage.ConfirmPasswordPlaceholder)</label>

                            @Html.PasswordFor(x => x.ViewModel.Password2, new { @class = "form-control", @id = "confirmPassword", @placeholder = Model.CurrentPage.ConfirmPasswordPlaceholder, @ng_required = "true", @ng_model = "password2" })

                            @if (!string.IsNullOrEmpty(thisFeedbackClass))
                            {
                                @PasswordErrorMessage(@Html.ValidationMessageFor(x => x.ViewModel.Password2))
                            }
                        </div>
                        if (Model.ViewModel.PasswordIsNotReset.HasValue && Model.ViewModel.PasswordIsNotReset == true)
                        {
                            <div class="wysiwyg has-error">
                                <div class="help-block">@Html.PropertyFor(a => a.CurrentPage.PasswordResetFailureMessage)</div>
                            </div>
                        }

                        if (!string.IsNullOrEmpty(Model.ViewModel.PasswordResetSuccessMsg))
                        {
                            <div class="wysiwyg has-success">
                                <div class="help-block">@Html.Raw(Model.ViewModel.PasswordResetSuccessMsg)</div>
                            </div>
                        }

                        <div class="row mb-2x">
                            <div class="col-xs-6 col-sm-7 has-error">
                                <button class="btn btn-secondary btn-block" type="submit">@Html.PropertyFor(a => a.CurrentPage.ResetButtonText)</button>
                            </div>
                        </div>

                    }
                </div>
            </div>
        </div>

    </div>
</div>