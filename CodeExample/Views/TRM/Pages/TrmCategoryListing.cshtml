@using System.Diagnostics
@using Hephaestus.ContentTypes.Business.Extensions
@using TRM.Web.Constants
@using TRM.Web.Models.Find
@using TRM.Web.Models.Layouts
@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Catalog.TrmCategory, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.CategoryViewModel>

@{
    var myLayout = Model.Layout as TrmLayoutModel;
    if (myLayout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }

    @Html.FullRefreshPropertiesMetaData(new[] { "ThreeContentAreas" })
    var mainClass = !Model.CurrentPage.IsNewIn && Model.CurrentPage.ShowMyLeftMenu ? "col-xs-12 col-md-9 col-md-push-3" : "container";
    Debug.Assert(Request.Url != null, "Request.Url != null");
    var pageurl = Request.Url.AbsolutePath;

    var url = Url.Action("GetData", "SearchPage");


    var menuLabel = Html.TranslateFallback(StringResources.LeftMenuMobileText, StringConstants.TranslationFallback.Menu);

    if (!string.IsNullOrWhiteSpace(Model.CurrentPage.MenuButtonTextXs))
    {
        menuLabel = Model.CurrentPage.MenuButtonTextXs;
    }

}
<script type="text/javascript">
    
    function doSearch() {
        window.location = "@(pageurl)";
        return false;
    }

    var url = '@Url.Action("GetData", "SearchPage")';

    var currentEntryPage = 1;

    function updateSortOrder(sortOrderSelect) {
        location.assign(sortOrderSelect.value);
    }
    function updateFilters(newUrl) {
        if (isBreakpoint('xs') || isBreakpoint('sm')) {
            return null;
        } else {
            location.assign(newUrl);
        }
        return newUrl;
    }


    function loadMoreEntries(maxEntryPage, filters) {

        filters.IsEntries = true;
        currentEntryPage = currentEntryPage + 1;
        filters.CurrentPage = currentEntryPage;
        $.post(url,
            filters,
            function(response) {
                var scope = window.angular.element(document.body).scope();
                var $GridView = response.entryGridView;
                window.angular.element(document)
                    .injector()
                    .invoke(function($compile) {
                        $("#entryGridView").append($compile($GridView)(scope));
                    });
                scope.$digest();
            });
        if (currentEntryPage >= maxEntryPage) {
            $("#loadMoreEntries").hide();
        }
        return false;
    }

</script>


<div class="contentArea">
    <div class="row" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
        @Html.DisplayFor(m => m.CurrentPage.ThreeContentAreas.TopContent)
    </div>
</div>

@if (!myLayout.HideSiteBreadcrumb)
{
    @Html.Partial("_Breadcrumb", myLayout.Breadcrumb)
}

@if (myLayout.HasMessage)
{
    Html.RenderPartial("_MessageBox", myLayout.Message);
}

<div class="container">
    <div class="serviceMessages collapse">
        <div class="alert"></div>
    </div>
    <div class="row">
        <main class="@mainClass @(Model.CurrentPage.IsNewIn ? "new-in" : string.Empty)" is="content">
            
            <div class="heading-pag">
                @if (!Model.CurrentPage.HidePageTitle)
                {
                    <h1 class="h2 mt-0 pull-left">@Html.PropertyFor(x => x.CurrentPage.DisplayName)</h1>
                }
                @if (!Model.CurrentPage.IsNewIn && !Model.CurrentPage.DisplayNonSellableView && Model.ViewModel.Entries.Any())
                {
                    <div class="pull-right hidden-xs hidden-sm select-subtle ecomSort">
                        <select class="form-control" onchange="updateSortOrder(this)" id="entrySortTop">
                            @foreach (EntrySortOrder order in Enum.GetValues(typeof(EntrySortOrder)))
                            {
                                var selected = (order == Model.ViewModel.Filters.SelectedEntrySortOrder ? "selected" : "");
                                <option value="@Model.ViewModel.Filters.GetEntrySortOrderUrl(order)" @selected>@Html.TranslateFallback(order.DescriptionAttr(), order.ToString())</option>
                            }
                        </select>
                    </div>
                }
            </div>

            @if (Model.ViewModel.Entries.Any() && !Model.CurrentPage.IsNewIn)
            {
                <div class="pag-mob visible-xs visible-sm row mb-2x">
                    @if (!Model.CurrentPage.DisplayNonSellableView)
                    {
                        if (Model.CurrentPage.ShowMyLeftMenu && Model.ViewModel.Filters.EntryFacets.Count > 0)
                        {
                            <div class="col-xs-6 col-sm-4">
                                <a class="btn btn-default btn-block sidenav-trigger" data-target="#catFilters">@Html.TranslateFallback(StringResources.FilterResults, "Filter Results")</a>
                            </div>
                        }
                        <div class="pull-right col-xs-6 col-sm-4 select-subtle ecomSort">
                            <select class="form-control" onchange="updateSortOrder(this)" id="entrySortTop">
                                @foreach (EntrySortOrder order in Enum.GetValues(typeof(EntrySortOrder)))
                                {
                                    var selected = (order == Model.ViewModel.Filters.SelectedEntrySortOrder ? "selected" : "");
                                    <option value="@Model.ViewModel.Filters.GetEntrySortOrderUrl(order)" @selected>@Html.TranslateFallback(order.DescriptionAttr(), order.ToString())</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        if (Model.CurrentPage.ShowMyLeftMenu && Model.ViewModel.Filters.EntryFacets.Count > 0)
                        {
                            <div class="col-xs-12">
                                <a class="btn btn-default btn-block sidenav-trigger" data-target="#catFilters">@Html.TranslateFallback(StringResources.FilterResults, menuLabel)</a>
                            </div>
                        }
                    }
                </div>
            }
            
            <div class="contentArea" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
                <div class="row">
                    @Html.DisplayFor(m => m.CurrentPage.ThreeContentAreas.MiddleContent)
                </div>
            </div>

            @if (Model.CurrentPage.CategoryDescription != null && !string.IsNullOrWhiteSpace(Model.CurrentPage.CategoryDescription.ToString()))
            {
                <div class="row mb-2x">
                    <div class="col-xs-12 col-md-8">
                        <p>@Model.CurrentPage.CategoryDescription</p>
                    </div>
                </div>
            }

            @if (Model.CurrentPage.DisplayNonSellableView)
            {
                <div class="row hidden-xs mb-1x strong">
                    <div class="col-xs-4 col-sm-2">@Html.TranslateFallback(StringResources.CoinImage, "Coin Image")</div>
                    <div class="col-xs-8 col-sm-8 col-sm-push-2">@Html.TranslateFallback(StringResources.DesignerInformation, "Design / Designer Information")</div>
                    <div class="col-xs-8 col-xs-push-4 col-sm-push-0 col-sm-2 col-sm-pull-8">@Html.TranslateFallback(StringResources.YearOfIssue, "Year of Issue")</div>
                </div>
                <div class="clear">
                    @Html.Partial("_VariantListingNonSellable", Model.ViewModel.Entries)
                </div>
            }
            else
            {
                <div class="rmGridView clear" id="entryGridView">
                    @Html.Partial("_VariantListingView", Model.ViewModel.Entries)
                </div>

                if (Model.ViewModel.TotalEntryCount > Model.ViewModel.Entries.Count)
                {
                    var filterDto = Json.Encode(Model.ViewModel.SearchPageHeader.FilterDto);
                    <div class="col-sm-4 col-sm-offset-4">

                        <a id="loadMoreEntries" class="btn btn-default btn-block" role="button" onclick="return loadMoreEntries(@Model.ViewModel.SearchPageHeader.TotalEntryPages, @filterDto);">@Html.TranslateFallback(StringResources.ViewMore, "View More") </a>
                    </div>
                }
            }
        </main>

        @if (!Model.CurrentPage.IsNewIn && Model.CurrentPage.ShowMyLeftMenu && Model.ViewModel.Filters.EntryFacets.Count > 0)
        {
            <aside class="mobile-sidenav col-md-3 col-md-pull-9" id="catFilters">
                <a class="btn btn-default pull-right visible-sm visible-xs closeButton"><i class="trmi trmi-close"></i></a>

                @{
                    if (!Model.CurrentPage.DisplayNonSellableView && Model.ViewModel.Entries.Any())
                    {
                        @Html.Partial("_SearchFilters", Model.ViewModel.Filters)
                    }
                    if (Model.CurrentPage.ShowManualLeftNavigation)
                    {
                        Html.RenderPartial("_ManualLeftMenu", myLayout);
                    }

                    if (Model.CurrentPage.ShowAutomaticLeftNavigation)
                    {
                        Html.RenderPartial("_AutomaticLeftMenu", myLayout);
                    }
                }
                <div class="row">
                    @Html.PropertyFor(m => m.CurrentPage.BottomNavContentArea)
                </div>

            </aside>
        }
    </div>
   
    @if (!Model.CurrentPage.HideRecentlyViewed)
    {
        <div class="row" ng-cloak>
            @{Html.RenderPartial("_VariantPageRecentlyViewed", string.Empty);

            }
        </div>
    }
</div>

<div class="contentArea" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
    <div class="row">
        @Html.DisplayFor(m => m.CurrentPage.ThreeContentAreas.BottomContent)
    </div>
</div>