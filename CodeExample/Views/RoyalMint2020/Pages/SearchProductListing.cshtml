@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.SearchPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.SearchPageViewModel>
@using TRM.Web.Constants
@using TRM.Web.Models.Layouts
@using EPiServer.Web
@using System.Web.Optimization
@using EPiServer.Find.Helpers.Text
@using Hephaestus.ContentTypes.Business.Extensions
@using TRM.Shared.Extensions
@using TRM.Web.Models.Find

@{
    var layout = Model.Layout as TrmLayoutModel;
    if (layout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }
    var viewModel = Model.ViewModel;
    var isPriceAvailable = viewModel.Filters.EntryFacets.Any(x => x.Name == "Price" && x.Terms.Any());
    var searchPageUrl = Request.Url.AbsolutePath;
    var productListingType = @viewModel.Filters.ProductListingType?.ToString();
}

@section PageStyles
{
    @Styles.Render("~/bundles/" + SiteDefinition.Current.Name + "searchCss")
}

    <script type="text/javascript">
    var currentResultPage = 1;
    var currentHelpPage = 1;
    var getMoreProductsUrl = '@Url.Action("GetProductListingData", "SearchPage")';

    function loadMoreProducts(maxResults, cacheResultsForMinutes) {
        currentResultPage = currentResultPage + 1;
        loadProducts(true, maxResults, cacheResultsForMinutes);

        return false;
    }

    function applyFilters(maxResults, cacheResultsForMinutes) {
        currentResultPage = 1;
        loadProducts(false, maxResults, cacheResultsForMinutes);

        return false;
    }

    function getFilters(q, type) {
        var checkboxes = document.getElementsByName('filterCheckBox');
        var url = getMoreProductsUrl + "?q=" + q + "&type=" + type;

        for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].checked) {
                var key = checkboxes[i].attributes["encodedvalue"].nodeValue;
                var value = checkboxes[i].attributes["encodedterm"].nodeValue;
                url = url + "&" + key + "=" + value;
            }
        }
        var minValue = $("#min").val();
        var maxValue = $("#max").val();
        if ($.isNumeric(minValue) || $.isNumeric(maxValue)) {
            if (minValue >= 0 || maxValue >= 0) {
                if (!$.isNumeric(minValue)) {
                    minValue = "0";
                }
                if (!$.isNumeric(maxValue)) {
                    maxValue = "999999999";
                }
                var minMaxValue = minValue + "-" + maxValue;
                url = url + "&" + "ProductPrices" + "=" + minMaxValue;
            }
        }

        return url;
    }
    function updateView(currentResultPage) {
        var noResultFound = $("#noResult").text();
        var totalPageCountOnFilter = $("#totalPagesCount").val();
        if ((typeof totalPageCountOnFilter !== 'undefined' && totalPageCountOnFilter !== null && totalPageCountOnFilter.length !== 0)) {
            totalPagesCount = totalPageCountOnFilter;
        }
        if (currentResultPage >= totalPagesCount || (typeof noResultFound !== 'undefined' && noResultFound !== null && noResultFound.length !== 0)) {
            $("#loadMoreButton").hide();
        } else {
            $("#loadMoreButton").show();
        }
    }
    function loadProducts(paging, maxResults, cacheResultsForMinutes) {
        var q = '@HttpContext.Current.Request.QueryString["q"]';
        var type = '@HttpContext.Current.Request.QueryString["type"]';

        var url = getFilters(q, type)
        var data = {
            query: q,
            listingType: type,
            currentPage: currentResultPage,
            entrySortOrder: $("#sort-select").children("option:selected").val(),
            cacheResultsForMinutes: cacheResultsForMinutes,
            maxResults: maxResults,
            checkboxUrl: url
        };

        $('.js-loader-search').show();

        $.post(url, data,
            function (response) {
                if (paging) {
                    $("#productsView").append(response.entryGridView);
                    updateView(currentResultPage);
                }
                else {
                    $("#productsView").html(response.entryGridView);
                    updateView(currentResultPage);
                    $("#totalEntryCount").text($($.parseHTML(response.entryGridView)).filter("#totalItems").val());
                }
            }).always(function() {
                    $('.js-loader-search').hide();
                });
    }
    </script>

<div class="pageContainer">
    @if (!layout.HideSiteBreadcrumb)
    {
        Html.RenderPartial("RoyalMint2020/_Breadcrumb", layout.Breadcrumb);
    }

    @if (layout.HasMessage)
    {
        Html.RenderPartial("_MessageBox", layout.Message);
    }
</div>

<div class="mod-filters">
    <div class="filters-trigger d-md-none" data-toggle="modal" data-target="#filters-modal" data-content="#filters">Filters <span class="icon"><svg><use xlink:href="#chevron-down" /></svg></span></div>

    <div class="filters-container d-none d-md-block">
        <form action="./" method="post" id="filters" class="mod-form-dark">
            <fieldset>
                <legend class="sr-only">Filter products</legend>
                <div class="row justify-content-center no-gutters">
                    <div class="col-md-12 col-lg-11">
                        <div class="row justify-content-center no-gutters">
                            @foreach (var facet in viewModel.Filters.EntryFacets.Where(x => x.Terms.Any()))
                            {
                                <div class="col-sm-6 col-md-2">
                                    <div class="form-group">
                                        <p class="form-label">@facet.Name</p>
                                        @if (facet.Description.IsNotNullOrEmpty())
                                        {
                                            <p class="information">
                                                <span class="icon"><svg><use xlink:href="#help" /></svg></span>
                                                <span>@facet.Description</span>
                                            </p>
                                        }
                                        @foreach (var term in facet.Terms.OrderBy(x => x.DisplayName).Take(7))
                                        {
                                            <div class="custom-control custom-checkbox">
                                                <input name="filterCheckBox" id="@facet.EncodedName.ToLower()-term-@term.EncodedTerm.ToLower()"
                                                       class="custom-control-input" type="checkbox" EncodedValue="@facet.EncodedValue" EncodedTerm="@term.EncodedTerm" />
                                                <label for="@facet.EncodedName.ToLower()-term-@term.EncodedTerm.ToLower()"
                                                       class="custom-control-label">@term.DisplayName</label>
                                            </div>
                                        }
                                        @if (facet.ViewAllLink != null)
                                        {
                                            <a href="@Url.ContentUrlExtension(facet.ViewAllLink)" style="color: white;">View all</a>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="row justify-content-md-center justify-content-lg-around align-items-center no-gutters">
                            @if (isPriceAvailable)
                            {
                                <div class="col-md-11 col-lg-5 col-xl-6">
                                    <p class="form-label">Price</p>
                                    <div class="form-row">
                                        <div class="col-sm-6 mb-1">
                                            <div class="form-row">
                                                <label for="min" class="col-form-label col-2 text-md-center">&pound;</label>
                                                <div class="col-11 col-md-10">
                                                    <input type="number" class="form-control" id="min" placeholder="Min" step="10">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 mb-1">
                                            <div class="form-row">
                                                <label for="max" class="col-form-label col-2 text-md-center">To</label>
                                                <div class="col-11 col-md-10 not-gutters">
                                                    <input type="number" class="form-control" id="max" placeholder="Max" step="10">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div><!-- /.col -->
                            }

                            <div class="col-md-11 col-lg-5 col-xl-4 sort">
                                <div class="form-row align-items-end">
                                    <div class="col-md-8 col-lg-6 mb-1">
                                        <label for="sort" class="col-form-label">Sort by</label>
                                        <select id="sort-select" class="form-control custom-select">
                                            @foreach (EntrySortOrder order in Enum.GetValues(typeof(EntrySortOrder)))
                                            {
                                                var selected = (order == viewModel.Filters.SelectedEntrySortOrder ? "selected" : "");
                                                <option value="@order" @selected>@Html.TranslateFallback(order.DescriptionAttr(), order.ToString())</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-4 col-lg-6 mb-1 mt-2 text-center">
                                        <button type="button" class="btn btn-light" data-dismiss="modal"
                                                onclick="applyFilters(@viewModel.Filters.MaxResults,
                                                                      @viewModel.Filters.CacheResultsForMinutes)">
                                            Filter results
                                        </button>
                                    </div>
                                </div>
                            </div><!-- /.col -->
                        </div>
                    </div><!-- /.row -->
                </div>
            </fieldset>
        </form><!-- /.mod-filters -->
    </div><!-- /.filters-container -->
</div><!-- /.mod-filters -->

<div class="modal modal-dark fade" id="filters-modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header justify-content-center">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="icon"><svg><use xlink:href="#close"></use></svg></span>
                </button>
            </div><!-- /.modal-header -->
            <div class="modal-body"></div><!-- /.modal-body -->
        </div>
    </div>
</div>

<div class="mod-section">
    <h2 class="section-head"><span id="totalEntryCount">@productListingType (@viewModel.TotalEntryCount)</span></h2>

    <div class="row justify-content-center">
        <div class="col-12 col-md-10">
            <div class="row justify-content-center" id="productsView">
                @foreach (var entryViewModel in viewModel.Entries)
                {
                    <div class="col-12 col-md-6 col-lg-4 d-flex">
                        @{ Html.RenderPartial("PagePartials/TrmEntryPartial", entryViewModel); }
                    </div>
                }
            </div>
            <div class="js-mod-loader js-loader-search" style="height:6.25rem; display:none">
                <div class="js-loader loading small" style="background-color:inherit"></div>
            </div>
            @if (viewModel != null && viewModel.SearchPageHeader != null && viewModel.SearchPageHeader.TotalEntryPages > 1)
            {
                <button id="loadMoreButton" class="btn btn-secondary"
                        onclick="loadMoreProducts(@viewModel.Filters.MaxResults,
                                              @viewModel.Filters.CacheResultsForMinutes);">
                    Load more
                </button>
            }
        </div>
    </div>
</div>

@section JustBeforeBodyTag
{
    @Scripts.Render("~/bundles/" + SiteDefinition.Current.Name + "filters")
}