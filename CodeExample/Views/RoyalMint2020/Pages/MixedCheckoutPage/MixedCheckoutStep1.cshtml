@using EPiServer.Editor
@using EPiServer.Web.Mvc.Html
@using TRM.Shared.Extensions;
@using TRM.Web.Constants
@using Newtonsoft.Json
@using TRM.Web.Models.ViewModels
@using TRM.Web.Models.Layouts
@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.MixedCheckoutPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.Bullion.MixedCheckout.MixedCheckoutStep1ViewModel>
@{
    var myLayout = Model.Layout as TrmLayoutModel;
    if (myLayout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }

    var progressBarViewModel = new ProgressBarViewModel
    {
        Steps = new List<ProgressBarItem> {
            new ProgressBarItem {
                Heading = Model.CurrentPage.Step1TabHeading,
                Number = "1",
                IsCurrent = true
            },
            new ProgressBarItem {
                Heading = Model.CurrentPage.Step2TabHeading,
                Number = "2",
            },
            new ProgressBarItem {
                Heading = Model.CurrentPage.Step3TabHeading,
                Number = "3"
            },
            new ProgressBarItem {
                Heading = Model.CurrentPage.Step4TabHeading,
                Number = "4",
            }
        }
    };
}

@functions
{
    public bool FieldHasErrors(string fieldName)
    {
        return (ViewData.ModelState[fieldName] != null && ViewData.ModelState[fieldName].Errors.Any());
    }
}

@{
    var FormViewModel = new
    {
        isAuthenticated = Request.IsAuthenticated,
        warning = Model.ViewModel.Message,
        fullNameField = new
        {
            name = "FullName",
            label = Model.CurrentPage.Step1FullnameTitle,
            placeholder = "",
            error = Html.TranslateFallback(StringResources.NameRequired, "Name is required"),
            existing = Model.ViewModel.FullName.Replace("'", " "),
        },
        addressField = new
        {
            label = Model.CurrentPage.Step1DeliveryAddressTextBoxTitle,
            optionSelect = Html.TranslateFallback(StringResources.SelectionPleaseSelect, StringConstants.TranslationFallback.SelectionPleaseSelect),
            optionNew = Html.TranslateFallback(StringResources.SelectionNew, StringConstants.TranslationFallback.SelectionNew),
            nickname = Model.CurrentPage.AddressNicknameLabel,
            error = Model.CurrentPage.AddressNicknameErrorMessage,
            help = Model.CurrentPage.AddressNicknameMessage,
            validationError = Html.TranslateFallback(StringResources.RequiredNickname, "Nickname is required"),
            validationNickNameAlreadyExists = Html.TranslateFallback(StringResources.NicknameExisted, "Nickname already exists"),

        },
        postCodeField = new
        {
            label = Model.CurrentPage.PostcodeLabel,
            value = Model.ViewModel.DeliveryAddress.PostalCode,
            placeholder = Model.CurrentPage.PostcodePlaceholder,
            enterManually = Model.CurrentPage.EnterManuallyText,
            cancel = Model.CurrentPage.EnterManuallyCancelText,
            error = Html.TranslateFallback(StringResources.InvalidPostcode, "Postcode is invalid"),
            postcodeAnywhereLicense = myLayout.PostcodeAnywhereLicense
        },
        addressLine1Field = new
        {
            label = Model.CurrentPage.AddressLine1Label,
            value = Model.ViewModel.DeliveryAddress.Line1,
        },
        addressLine2Field = new
        {
            label = Model.CurrentPage.AddressLine2Label,
            value = Model.ViewModel.DeliveryAddress.Line2,
        },
        cityField = new
        {
            label = Model.CurrentPage.AddressLine3Label,
            value = Model.ViewModel.DeliveryAddress.City,

        },
        countryField = new
        {
            label = Model.CurrentPage.AddressCountryLabel ?? Html.TranslateFallback(StringResources.County, "Country"),
            list = Model.ViewModel.CountryList,
        },
        countyField = new
        {
            label = Model.CurrentPage.AddressCountyLabel ?? Html.TranslateFallback(StringResources.County, "County"),
        },
        isNewUser = false,
        isRegistration = false,
        registrationField = new { },
        deliveryField = new
        {
            heading = Model.CurrentPage.Step1DeliveryAddressTitle,
            optionsHeading = Model.CurrentPage.Step1DeliveryOptionsTitle,
            optionsMessage = Model.CurrentPage.Step1DeliveryOptionsDescription,
            multipleDeliveryMessage = "",

            error = Html.TranslateFallback(StringResources.Error, "Address is required"),
            errorCountryCode = Html.TranslateFallback(StringResources.ErrorCountryCode, "Country is required"),
            errorPostCode = Html.TranslateFallback(StringResources.ErrorPostCode, "Postal Code is required"),
            postalCodeMaxLength = string.Format(Html.TranslateFallback(StringResources.MaxlengthError, "Postal Code is over {0} signs"), 11),
            errorPostCodeInvalid = Html.TranslateFallback(StringResources.ErrorPostCodeInvalid, "Postcode is invalid"),
            addressLine1MaxLength = string.Format(Html.TranslateFallback(StringResources.AddressLineMaxlengthError, "Address cannot be longer than {0} characters"), 80),
            addressLine2MaxLength = string.Format(Html.TranslateFallback(StringResources.AddressLineMaxlengthError, "Address cannot be longer than {0} characters"), 80),
            cityRequired = Html.TranslateFallback(StringResources.RequiredCity, "City is required"),
            cityMaxLength = string.Format(Html.TranslateFallback(StringResources.CityMaxlengthError, "City cannot be longer than {0} characters"), 64),
            countyMaxLength = string.Format(Html.TranslateFallback(StringResources.CountyMaxlengthError, "County cannot be longer than {0} characters"), 64),
        },
        giftField = new
        {
            isGiftLabel = Model.CurrentPage.Step1GiftTitle,
            isGiftSelected = Model.ViewModel.IsGiftOrder,
            heading = Html.TranslateFallback(StringResources.GiftMessageHeading, "Gift Message"),
            message = Html.TranslateFallback(StringResources.GiftMessage, "You can leave a special message, this will be printed on the despatch note and the value of the order will be removed. This message will not be printed inside a card."),
            tooltip = "",
            value = Model.ViewModel.GiftMessage,
            maxlength = myLayout.GiftingMessageMaxLength,
            maxlengthError = string.Format(Html.TranslateFallback(StringResources.MaxlengthErrorGiftMessage, "Your message cannot be longer than {0} characters"), myLayout.GiftingMessageMaxLength),
            placeholder = Html.TranslateFallback(StringResources.GiftMessagePlaceholder, "Enter your gift message here"),
        },
        marketMessage = Html.TranslateFallback(StringResources.MarketMessage, "There is a product in your basket that is unavailable for delivery to your country. You will be unable to proceed until you remove it from your basket."),
        undeliverableItems = Html.TranslateFallback(StringResources.UndeliverableItems, "undeliverable items:"),
        basket = new
        {
            url = myLayout.BasketPage.GetExternalUrl_V2(),
            text = Html.TranslateFallback(StringResources.ReturnToBasket, "Return to basket"),
        },
        noDeliveryOptionsMessage = @Html.TranslateFallback(StringResources.NoDeliveryOptionsMessage, "No delivery option for selected address"),
        shippingApiCallFailedMessage = @Html.TranslateFallback(StringResources.ShippingApiCallFailedMessage, "Shipping API call failed"),
        nextButton = Model.CurrentPage.Step1NextButtonText,
        nextLabel = Model.CurrentPage.Step1NextStepText,
        actionUrl = Url.Action(Html.TranslateFallback(StringResources.Step1, "Step1")),
        addressIncomplete = Html.TranslateFallback(TRM.Shared.Constants.StringResources.AddressIncomplete, "Address is incomplete, please enter manually"),
    };
}

@helper ErrorMessage(string fieldName)
{
    var fieldKey = string.Format("viewModel.{0}", fieldName);
    if (ViewData.ModelState[fieldKey] != null && ViewData.ModelState[fieldKey].Errors.Any())
    {
        <span class="help-block">
            <span class="field-validation-error text-danger" data-valmsg-for="fieldKey" data-valmsg-replace="true">@Html.ValidationMessage(fieldKey)</span>
        </span>
    }
}

<div class="mod-section">
    @{ Html.RenderPartial("RoyalMint2020/_ProgressBar", progressBarViewModel); }

    <div class="row justify-content-center text-center">
        @if (Model.CurrentPage.ThreeContentAreas.TopContent != null)
        {
            <div class="col-12 form-spacing">
                <div class="row">
                    @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.TopContent)
                </div>
            </div>
        }

        <div class="col-md-10 col-lg-8">
            <div class="form-container">
                <div class="form-spacing">

                    @if (Model.CurrentPage.Step1PageHeading != null)
                    {
                        <h1>@Html.PropertyFor(x => x.CurrentPage.Step1PageHeading)</h1>
                    }

                    <div class="row justify-content-center">
                        <div class="col-10 col-sm-8 col-md-7 col-lg-6">
                            <div class="text-danger">
                                @Html.ValidationSummary(false)
                            </div>
                        </div>
                    </div>
                    @if (Model.CurrentPage.ThreeContentAreas.MiddleContent != null)
                    {
                        @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.MiddleContent)
                    }
                </div>
                @if (!string.IsNullOrEmpty(Model.CurrentPage.Step1SubHeading))
                {
                    <h2 class="section-head pt-0"><span>@Html.PropertyFor(x => x.CurrentPage.Step1SubHeading)</span></h2>
                }
                @if (Model.ViewModel.IsMetapackAvailable)
                {
                    <div data-module="metapack" data-settings="@JsonConvert.SerializeObject(FormViewModel)"></div>
                }
                else
                {
                    <div data-module="delivery" data-settings="@JsonConvert.SerializeObject(FormViewModel)"></div>
                }
            </div>
            @if (Model.CurrentPage.ThreeContentAreas.BottomContent != null)
            {
                <div class="row">
                    @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.BottomContent)
                </div>
            }
        </div>
    </div>
</div>

<!-- Fill DataLayer -->
@Html.Action("PushDataLayerBasketCart", "Shared", new { step = Step.Four })