@using EPiServer.Web.Mvc.Html
@using Hephaestus.CMS.Extensions
@using Hephaestus.Commerce.Shared.Models
@using TRM.Web.Constants
@using TRM.Web.Models.Layouts
@using TRM.Shared.Extensions;
@using Newtonsoft.Json
@using TRM.Web.Models.ViewModels
@using EPiServer.Framework.Localization
@using EPiServer.Globalization

@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.MixedCheckoutPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.Bullion.MixedCheckout.MixedCheckoutStep3ViewModel>
@{
    var myLayout = Model.Layout as TrmLayoutModel;
    if (myLayout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }

    var progressBarViewModel = new ProgressBarViewModel
    {
        Steps = new List<ProgressBarItem> {
            new ProgressBarItem {
                Heading = Model.CurrentPage.Step1TabHeading,
                Number = "1",
                IsComplete = true
            },
            new ProgressBarItem {
                Heading = Model.CurrentPage.Step2TabHeading,
                Number = "2",
                 IsComplete = true
            },
            new ProgressBarItem {
                Heading = Model.CurrentPage.Step3TabHeading,
                Number = "3",
                IsCurrent = true
            },
            new ProgressBarItem {
                Heading = Model.CurrentPage.Step4TabHeading,
                Number = "4",

            }
        }
    };
    var ViewModel = new
    {
        deliveryAddress = new
        {
            line1 = Model.ViewModel.DeliveryAddress.Line1,
            line2 = Model.ViewModel.DeliveryAddress.Line2,
            city = Model.ViewModel.DeliveryAddress.City,
            postalCode = Model.ViewModel.DeliveryAddress.PostalCode,
        },
        currentPage = new
        {
            itemsForDeliveryHeading = Model.CurrentPage.Step3ItemsForDeliveryHeading,
            pricesAreNowLiveTitle = Model.CurrentPage.Step3PricesAreNowLiveTitle,
            pricesAreNowLiveToothTip = Model.CurrentPage.Step3PricesAreNowLiveToolTip,
            deliveryCostTitle = Model.CurrentPage.Step3DeliveryCostTitle,
            itemsForVaultedHeading = Model.CurrentPage.Step3ItemsForVaultedHeading,
            itemsForVaultedDescription = Model.CurrentPage.Step3ItemsForVaultedDescription,
            insufficientFundsDescription = Model.CurrentPage.Step3InsufficientFundsDescription,
            insufficientFundsHeading = Model.CurrentPage.Step3InsufficientFundsHeading,
            fixPriceAndBuyInvestmentsButtonText = Model.CurrentPage.Step3InvestButtonText,
            externalUrl = Model.CurrentPage.ContentLink.GetExternalUrl_V2(),
            availableToInvestTitle = Model.CurrentPage.Step3AvailableToInvestTitle.ToString(),
            availableToInvestTooltip = Model.CurrentPage.Step3AvailableToInvestTooltip.ToString(),
            livePriceValidTime = Model.CurrentPage.Step3LivePriceValidTime,
            investButtonText = Model.CurrentPage.Step3InvestButtonText,
            livePriceTitle = Html.TranslateFallback(StringResources.LivePriceTitle, "LIVE Prices valid for"),
            orderSummary = Html.TranslateFallback(StringResources.BullionOrderSummary, "Order summary"),
            payment = Html.TranslateFallback(StringResources.BullionPayment, "Payment"),
            investTotalLabel = Html.TranslateFallback(StringResources.InvestmentTotal, "Investment Total"),
            savedAmountLabel = Html.TranslateFallback(StringResources.SavedTotal, "Saved Amount"),
            subTotalLabel = Html.TranslateFallback(StringResources.SubTotal, "Sub Total"),
            deliveryLabel = Html.TranslateFallback(StringResources.DeliveryFee, "Delivery"),
            freeDeliveryLabel = Html.TranslateFallback(StringResources.BasketFreeDelivery, StringConstants.TranslationFallback.BasketFreeDelivery),
            vatLabel = Html.TranslateFallback(StringResources.InvestmentVat, "VAT"),
        },
        ui = new
        {
            bullionQuickCheckOutAddFundsButton = Html.TranslateFallback(StringResources.BullionQuickCheckOutAddFundsButton, "Add funds"),
            availableToInvest = Model.ViewModel.AvailableToInvest.ToString(),
            isSippContact = myLayout.IsSippContact,
            showInsufficientFunds = Model.ViewModel.ShowInsufficientFunds,
            hideFixPriceButton = Model.ViewModel.HideFixPriceButton,
            validForPayment = Model.ViewModel.ValidForPayment,
        },
        syncModal = new
        {
            title = LocalizationService.Current.GetStringByCulture(StringResources.BullionCheckoutSyncWithPampErrorTitle, "Pamp Error", ContentLanguage.PreferredCulture),
            message = LocalizationService.Current.GetStringByCulture(StringResources.BullionCheckoutSyncWithPampErrorMessage, "Pamp Error!!!", ContentLanguage.PreferredCulture),
            notEnoughMoney = LocalizationService.Current.GetStringByCulture(StringResources.BullionCheckoutSyncWithPampNotEnoughMoney, "Pamp Not Enough Money!!!", ContentLanguage.PreferredCulture),
            confirmation = Html.TranslateFallback(StringResources.BullionCheckoutSyncWithPampErrorConfirmButtonLabel, "Ok")
        },
    };
}

<div class="mod-section">
    @Html.Partial("_BullionSyncWithPampErrorInformTemplate")

    @{ Html.RenderPartial("RoyalMint2020/_ProgressBar", progressBarViewModel); }

    <div class="row justify-content-center text-center">
        @if (Model.CurrentPage.ThreeContentAreas.TopContent != null)
        {
            <div class="col-12 form-spacing">
                <div class="row">
                    @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.TopContent)
                </div>
            </div>
        }

        <div class="col-md-10 col-lg-8">
            <div class="form-container">
                <div class="form-spacing">
                    <h1>@Html.PropertyFor(x => x.CurrentPage.Step3Heading)</h1>
                    <div class="row justify-content-center">
                        <div class="col-10 col-sm-8 col-md-7 col-lg-6">
                            <div class="text-danger">
                                @Html.ValidationSummary(false)
                            </div>
                        </div>
                    </div>
                    @if (Model.CurrentPage.ThreeContentAreas.MiddleContent != null)
                    {
                        @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.MiddleContent)
                    }
                </div>

                @if (Model.ViewModel.PurchaseOrder != null)
                {
                    <div class="row justify-content-center">
                        <div class="col-10 col-lg-9">
                            <div class="form-spacing">
                                <div class="message pl-3 pr-3 pt-3 pb-3">
                                    <div class="row">
                                        <div class="pr-1">
                                            <span class="icon-container"><span class="icon"><svg><use xlink:href="#check"></use></svg></span></span>
                                        </div>
                                        <div class="col">
                                            <h3 class="h4 text-left">Retail Order complete</h3>
                                            <div class="row d-md-flex d-block">
                                                <div class="col-md mt-1">
                                                    <div class="d-table">
                                                        <div class="d-table-row mt-0 mb-0">
                                                            <strong class="d-table-cell pr-2">Retail Total:</strong>
                                                            <div class="d-table-cell"> @Model.ViewModel.PurchaseOrder.Total</div>
                                                        </div>
                                                        <div class="d-table-row mt-0 mb-0">
                                                            <strong class="d-table-cell pr-2">Order Number:</strong>
                                                            <div class="d-table-cell">
                                                                @foreach (var orderNo in Model.ViewModel.PurchaseOrder.OrderNumbers)
                                                                {
                                                                    <span>@orderNo</span>
                                                                }
                                                            </div>
                                                        </div>
                                                        <div class="d-table-row mt-0 mb-0">
                                                            <strong class="d-table-cell pr-2">Order Total:</strong>
                                                            <div class="d-table-cell">@Model.ViewModel.PurchaseOrder.Total</div>
                                                        </div>
                                                        <div class="d-table-row mt-0 mb-0">
                                                            <strong class="d-table-cell pr-2">Paid by:</strong>
                                                            <div class="d-table-cell">
                                                                @foreach (var payment in Model.ViewModel.PurchaseOrder.Payments)
                                                                {
                                                                    <span>@payment.CardType</span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md mt-1">
                                                    <strong class="">Delivery Address:</strong>
                                                    @{
                                                        var deliveryAddress = new AddressModel();
                                                        var shipment = Model.ViewModel.PurchaseOrder.Shipments.FirstOrDefault();

                                                        if (shipment != null)
                                                        {
                                                            deliveryAddress = shipment.Address;
                                                        }
                                                    }
                                                    @{Html.RenderPartial("RoyalMint2020/_Address", new AddressViewModel { Address = deliveryAddress });}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @Html.DisplayFor(x => x.CurrentPage.Step3RightContentArea)
                            </div>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.CurrentPage.Step1SubHeading))
                {
                    <h2 class="section-head"><span>@Html.PropertyFor(x => x.CurrentPage.Step3Heading)</span></h2>
                }
                <div data-module="delivery-and-payment" data-settings="@JsonConvert.SerializeObject(ViewModel)"></div>
            </div>
        </div>
        @if (Model.CurrentPage.ThreeContentAreas.BottomContent != null)
        {
            <div class="col-12 form-spacing">
                @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.BottomContent)
            </div>
        }
    </div>
</div>

<!-- Fill DataLayer -->
@Html.Action("PushDataLayerBasketCart", "Shared", new { step = Step.Five })
@section HeaderScripts{
    @Html.Partial("_RedirectOutsideTheIframe")
}
