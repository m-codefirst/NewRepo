@using TRM.Web.Constants
@using EPiServer.Web
@using TRM.Web.Models.Layouts
@using Newtonsoft.Json
@using System.Web.Optimization

@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.Bullion.DeliverBullionLandingPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.Bullion.DeliverBullionLandingViewModel>



@section PageStyles
{
    @Styles.Render("~/bundles/" + SiteDefinition.Current.Name + "vaultedHoldingsCss")
}
@{
    var myLayout = Model.Layout as TrmLayoutModel;
    if (myLayout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }

    var deliverBullionViewModel = new
    {
        texts = new
        {
            deliverInvestment = Html.TranslateFallback(StringResources.DeliverInvestment, "Investment"),
            deliveryFee = Html.TranslateFallback(StringResources.DeliveryFee, "Delivery"),
            deliveryVat = Html.TranslateFallback(StringResources.DeliveryVat, "Delivery VAT"),
            deliveryTotal = Html.TranslateFallback(StringResources.DeliveryTotal, "Delivery Total"),
            standardDeliveryToRegisteredInvestmentAddress =@Html.TranslateFallback(StringResources.StandardDeliveryToRegisteredInvestmentAddress, " to registered investment address"),
            deliverVaultQuantity = Html.TranslateFallback(StringResources.DeliverVaultQuantity, "Vault Quantity"),
            availableForDelivery = Html.TranslateFallback(StringResources.AvailableForDelivery, "Available for Delivery"),
            availableForDeliveryTooltip = Html.TranslateFallback(StringResources.AvailableForDeliveryTooltip, "Available for Delivery"),
            deliverQty = Html.TranslateFallback(StringResources.DeliverQty, "Deliver Qty"),
            unableToSellOrDeliverFromVault = Html.TranslateFallback(StringResources.UnableToSellOrDeliverFromVault, "Customer flagged as unable to sell from vault or deliver from vault"),
          confirmDeliveryAndPayNow =  Html.TranslateFallback(StringResources.ConfirmDeliveryAndPayNow, "Confirm Delivery and Pay Now"),
          addFunds = Html.TranslateFallback(StringResources.AddFunds, "Add Funds"),
          availableWalletBalance = Html.TranslateFallback(StringResources.AvailableWalletBalance, "Available Wallet Balance "),
          insufficientFundsTitle = Html.TranslateFallback(StringResources.InsufficientFundsTitle, "You have Insufficient Funds in your Wallet"),
          insufficientFundsDescription = Html.TranslateFallback(StringResources.InsufficientFundsDescription, "If you would like to checkout with this investment item today please top up wallet.")
        },
        investmentVat = Model.ViewModel.InvestmentVat.ToString(),
        deliverCost = Model.ViewModel.DeliverCost.ToString(),
        deliverVat = Model.ViewModel.DeliverVat.ToString(),
        deliveryTotal = Model.ViewModel.DeliveryTotal.ToString(),
        availableToSell = Model.ViewModel.DeliverVariant.AvailableToSell.ToString("#"),
        quantityInVault = Model.ViewModel.DeliverVariant.QuantityInVault.ToString("#"),
        quantityToSellOrDeliver = Model.ViewModel.DeliverVariant.QuantityToSellOrDeliver.ToString("#"),
        shippingMethodFriendlyName =Model.ViewModel.ShippingMethod != null ? @Model.ViewModel.ShippingMethod.FriendlyName  : "",
       availableWalletBalance = Model.ViewModel.AvailableWalletBalance.ToString(),
        availableWalletBalanceAmount = Model.ViewModel.AvailableWalletBalance.Amount,
        deliveryTotalAmount = Model.ViewModel.DeliveryTotal.Amount,
        shippingMethod = Model.ViewModel.ShippingMethod,
        deliverAddress =  Model.ViewModel.DeliverAddress,
        code=  Model.ViewModel.DeliverVariant.Code,
        walletItems = Model.ViewModel.WalletItems,
        imageUrl = Model.ViewModel.DeliverVariant.ImageUrl,
        title = Model.ViewModel.DeliverVariant.Title,
        subtitle = Model.ViewModel.DeliverVariant.Subtitle,
        actionUrl = Url.Action("Index"),
        unableToDeliver = Model.ViewModel.UnableToDeliver,


    };
}
<div class="row justify-content-center text-center mod-section">
    <div class="col-md-10 col-lg-8">
      
        @if (Model.CurrentPage.ThreeContentAreas.TopContent != null)
        {
            <div class="row">
                @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.TopContent)
            </div>
        }
        <div class="form-container deliver-sell">
            <div class="row">
                <div class="col">
                   
                    <!-- Headline -->

                    <div class="row justify-content-center">
                        <div class="col-10 col-md-8">
                            <h2 class="section-head pt-0"><span>@Html.PropertyFor(x => x.CurrentPage.Heading)</span></h2>                           
                            <div class="text-danger text-center mt-3 mb-3">
                                @Html.ValidationSummary(false)
                            </div>
                            @Html.PropertyFor(x => x.CurrentPage.MainBody)
                            @if (Model.CurrentPage.ThreeContentAreas.MiddleContent != null)
                            {
                                <div class="row">
                                    @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.MiddleContent)
                                </div>
                            }
                            <div data-module="deliver-bullion" data-settings="@JsonConvert.SerializeObject(deliverBullionViewModel)"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (Model.CurrentPage.ThreeContentAreas.BottomContent != null)
        {
            <div class="row">
                @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.BottomContent)
            </div>
        }
    </div>
</div>

