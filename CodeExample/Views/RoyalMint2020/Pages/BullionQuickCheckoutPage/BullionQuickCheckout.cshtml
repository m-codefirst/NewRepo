@using TRM.Web.Constants
@using TRM.Web.Extentions
@using TRM.Web.Models.Layouts
@using TRM.Shared.Extensions
@using Newtonsoft.Json
@using TRM.Web.Models.ViewModels
@using EPiServer.Framework.Localization
@using EPiServer.Globalization
@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.Bullion.BullionQuickCheckoutPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.Bullion.QuickCheckout.QuickCheckoutViewModel>

@{
    var myLayout = Model.Layout as TrmLayoutModel;
    if (myLayout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }

    var items = Model.ViewModel.OrderGroupViewModel.Shipments.SelectMany(x => x.CartItems);
    var isExistsItem = items.Any(x => x != null);
    var firstItem = Model.ViewModel.OrderGroupViewModel.Shipments.SelectMany(x => x.CartItems).FirstOrDefault();
    var shouldShowAddFund = Model.ViewModel.ShowInsufficientFunds;
    var deliveryAddress = Model.ViewModel.DeliveryAddress;
    var firstShipment = Model.ViewModel.OrderGroupViewModel.Shipments.FirstOrDefault();

    var quickCheckoutViewModel = new
    {
        items = items,
        isExistsItem = isExistsItem,
        firstItem = firstItem,
        firstShipment = firstShipment,

        deliveryAddress = new
        {
            line1 = Model.ViewModel.DeliveryAddress.Line1,
            line2 = Model.ViewModel.DeliveryAddress.Line2,
            city = Model.ViewModel.DeliveryAddress.City,
            postalCode = Model.ViewModel.DeliveryAddress.PostalCode,
        },

        canVault = (firstItem == null) ? false : firstItem.BullionCartItem.CanVault,
        canDeliver = (firstItem == null) ? false : firstItem.BullionCartItem.CanDeliver,
        isSignatureVariant = (firstItem == null) ? false : firstItem.BullionCartItem.IsSignatureVariant,
        storageCost = (firstShipment != null) ? firstShipment.EstimatedStorageCost : string.Empty,
        showAddFund = Model.ViewModel.OrderGroupViewModel.TotalDecimal > Model.ViewModel.AvailableToInvest.Amount,
        fixPriceAndBuyInvestmentsButtonText = Model.CurrentPage.FixPriceAndBuyInvestmentsButtonText,
        isSippContact = Html.IsSippContact(),
        quickCheckoutPageUrl = Model.GetQuickCheckoutPageUrl() + "AddFunds",
        orderGroup = Model.ViewModel.OrderGroupViewModel,
        isNewContentArea = Model.CurrentPage.NewContentArea != null,
        newContentArea = Model.CurrentPage.NewContentArea,

        texts = new
        {
            availableWalletBalanceTitle = Model.CurrentPage.AvailableWalletBalanceTitle,
            availableToInvest = Model.ViewModel.AvailableToInvest.ToString(),
            bullionShipmentValidationError = Html.TranslateFallback(StringResources.BullionShipmentValidationError, "Please select shipment option"),
            bullionQuickCheckOutHeader = Html.TranslateFallback(StringResources.BullionQuickCheckOutHeader, "Buy Now"),
            bullionQuickCheckOutAddFundsButton = Html.TranslateFallback(StringResources.BullionQuickCheckOutAddFundsButton, "Add funds"),
            bullionQuickCheckOutPromotionCodeHeader = Html.TranslateFallback(StringResources.BullionQuickCheckOutPromotionCodeHeader, "Promotion code"),
            bullionQuickCheckOutPromotionCodeQuestion = Html.TranslateFallback(StringResources.BullionQuickCheckOutPromotionCodeQuestion, "Do you have a promotion code?"),
            bullionQuickCheckOutPromotionCodeMessage = Html.TranslateFallback(StringResources.BullionQuickCheckOutPromotionCodeMessage, "Please enter it here"),
            bullionQuickCheckOutPromotionCodeButton = Html.TranslateFallback(StringResources.BullionQuickCheckOutPromotionCodeButton, "Go!"),
            promotionsApplied = Html.TranslateFallback(StringResources.PromotionsApplied, StringConstants.TranslationFallback.PromotionsApplied),
            promotionsRemove = Html.TranslateFallback(StringResources.PromotionsRemove, StringConstants.TranslationFallback.PromotionsRemove),
            orderSummary = Html.TranslateFallback(StringResources.OrderSummary, "Order summary"),
            savedAmount = Html.TranslateFallBack(StringResources.SavedTotal, "Saved Amount"),
            livePrices = "LIVE Prices valid for",
            investmentTotal = Html.TranslateFallBack(StringResources.BullionQuickCheckOutInvestmentTotal, "Investment Total"),
            VAT = Html.TranslateFallBack(StringResources.BullionQuickCheckOutVAT, "VAT"),
            bullionDelivery = Html.TranslateFallBack(StringResources.BullionQuickCheckOutBullionDelivery, "Bullion Delivery"),
            subTotal = Html.TranslateFallBack(StringResources.BullionQuickCheckOutSubTotal, "Sub Total"),
            refreshEverySeconds = Html.TranslateFallBack(StringResources.BullionQuickCheckOutRefreshEverySeconds, "Price is LIVE"),
            seconds = Html.TranslateFallBack(StringResources.BullionQuickCheckOutSeconds, "seconds"),
            deliveryCost = Html.TranslateFallBack(StringResources.BullionQuickCheckOutDeliveryCost, "Delivery Cost:"),
            deliverHeader = Html.TranslateFallBack(StringResources.BullionQuickCheckOutDeliverHeader, "delivery to registered investment address"),
            exVat = Html.TranslateFallBack(StringResources.BullionQuickCheckOutExVat, "ex VAT"),
            findoutMoreLinkText = Html.TranslateFallBack(StringResources.BullionQuickCheckOutFindoutMoreLinkText, "Find out more"),
            vaultedSubHeader = Html.TranslateFallBack(StringResources.BullionQuickCheckOutVaultedSubHeader, "Storage fees apply to be billed in arrears and paid quarterly."),
            vaultedHeader = Html.TranslateFallBack(StringResources.BullionQuickCheckOutVaultedHeader, "Store in The Royal Mint Vault"),
            signatureHeader = Html.TranslateFallBack(StringResources.BullionQuickCheckOutSignatureHeader, "Our Signature Investment are stored in The Royal Mint Vault"),
            vaultOrShipmentHeader = Html.TranslateFallBack(StringResources.BullionQuickCheckOutVaultOrShipmentHeader, "Would you like to Vault this investment or have it Delivered?"),
            shipmentHeader = Html.TranslateFallBack(StringResources.BullionQuickCheckOutShipmentHeader, "This investment is not available for storage in the Vault"),
            insufficientfundsHeader = Html.TranslateFallBack(StringResources.BullionQuickCheckOutInsufficientfundsHeader, "You have Insufficient Funds in your Wallet"),
            insufficientfundsSubHeader = Html.TranslateFallBack(StringResources.BullionQuickCheckOutInsufficientfundsSubHeader, "If you would like to checkout with this investment item today please top up wallet."),
            investmentOrderTotal = Html.TranslateFallBack(StringResources.BullionQuickCheckOutInvestmentOrderTotal, "Investment Total: "),
            availableFunds = Html.TranslateFallBack(StringResources.BullionQuickCheckOutAvailableFunds, "Available Funds: "),
            estimatedStorageFee = Html.TranslateFallBack(StringResources.EstimatedStorageFee, "Estimated storage fee"),
            perAnnum = Html.TranslateFallBack(StringResources.PerAnnum, "p.a."),
            pricePerOzIncludingPremium = Html.TranslateFallBack(StringResources.BullionQuickCheckOutPricePerOzIncludingPremium, "Price per Oz including premium"),
            pricePerUnitIncludingPremium = Html.TranslateFallBack(StringResources.BullionQuickCheckOutPricePerOzIncludingPremium, "Price per Unit, including premium"),
            weight = Html.TranslateFallBack(StringResources.BullionQuickCheckOutWeight, "Weight"),
            oz = @Html.TranslateFallBack(StringResources.BullionQuickCheckOutOz, "oz"),
            requestedInvestment = Html.TranslateFallBack(StringResources.BullionQuickCheckOutRequestedInvestment, "Requested Investment"),
            livePrice = Html.TranslateFallBack(StringResources.BullionQuickCheckOutLivePrice, "Live Price"),
            quantity = Html.TranslateFallBack(StringResources.BullionQuickCheckOutQuantity, "Quantity"),
            storageFeesPageUrl = Url.ContentUrlExtension(Model.GetAppropriateStartPageForSiteSpecificProperties().StorageFeesPage)
        },

        syncModal = new
        {
            title = LocalizationService.Current.GetStringByCulture(StringResources.BullionCheckoutSyncWithPampErrorTitle, "Pamp Error", ContentLanguage.PreferredCulture),
            message = LocalizationService.Current.GetStringByCulture(StringResources.BullionCheckoutSyncWithPampErrorMessage, "Pamp Error!!!", ContentLanguage.PreferredCulture),
            notEnoughMoney = LocalizationService.Current.GetStringByCulture(StringResources.BullionCheckoutSyncWithPampNotEnoughMoney, "Pamp Not Enough Money!!!", ContentLanguage.PreferredCulture),
            confirmation = Html.TranslateFallback(StringResources.BullionCheckoutSyncWithPampErrorConfirmButtonLabel, "Ok")
        },

        // PampResult values
        initialData = new
        {
            pamp = new
            {
                isSyncWithPampError = Model.ViewModel.IsSyncWithPampError,
                shouldShowAddFund = shouldShowAddFund, // isShowInsufficientFunds in legacy js
                validForPayment = Model.ViewModel.ValidForPayment, // isValidForPayment in legacy js
                isNotEnoughMoney = Model.ViewModel.IsNotEnoughMoney,
                showFixedPriceButton = Model.ViewModel.Shipping != null && isExistsItem && !Model.ViewModel.ShowInsufficientFunds,
            },

            item = new
            {
                pricePerUnit = items.First().BullionCartItem.PricePerUnit.ToString()
            },
        }
    };
}

<div class="mod-section">
    <div class="row justify-content-center text-center">
        @if (Model.CurrentPage.ThreeContentAreas.TopContent != null)
        {
            <div class="col-12 form-spacing">
                <div class="row">
                    @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.TopContent)
                </div>
            </div>
        }
        <div class="col-md-10 col-lg-8">
            <div class="form-container pt-0">
                <div class="form-spacing">
                    @if (Model.CurrentPage.DisplayPageHeading)
                    {
                        <h1 class="mt-4">@Html.PropertyFor(m => m.CurrentPage.Heading)</h1>
                        <a name="back-link" class="" href="@(firstItem != null ? Url.ContentUrlExtension(firstItem.Url) : "javascript:history.back()")">
                            @Html.TranslateFallback(StringResources.Back, "Back")
                        </a>
                    }
                    <div class="row justify-content-center">
                        <div class="col-10 col-sm-8 col-md-7 col-lg-6">
                            <div class="quick-checkout-validation-errors text-danger text-center mt-3 mb-3">
                                @Html.ValidationSummary(false)
                            </div>
                        </div>
                    </div>

                    @if (Model.CurrentPage.ThreeContentAreas.MiddleContent != null)
                    {
                        @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.MiddleContent)
                    }

                    <div data-module="quick-checkout" data-settings="@JsonConvert.SerializeObject(quickCheckoutViewModel)"></div>
                </div>

            </div>
        </div>
        @if (Model.CurrentPage.ThreeContentAreas.BottomContent != null)
        {
            <div class="col-12 form-spacing">
                @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.BottomContent)
            </div>
        }
    </div>
</div>

<!-- Fill DataLayer -->
@Html.Action("PushDataLayerBasketCart", "Shared", new { step = Step.Four })