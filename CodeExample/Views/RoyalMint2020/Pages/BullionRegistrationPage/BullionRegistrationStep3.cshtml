@using EPiServer.Web.Mvc.Html
@using Hephaestus.CMS.Extensions
@using TRM.Web.Constants
@using Newtonsoft.Json
@using TRM.Web.Models.ViewModels
@using TRM.Web.Models.Layouts
@using TRM.Shared.Extensions;
@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.Bullion.BullionRegistrationPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.Bullion.BullionRegistration.RegistrationStep3ViewModel>

@functions
{
    public string ErrorMessage(string fieldName)
    {
        if (ViewData.ModelState[fieldName] != null && ViewData.ModelState[fieldName].Errors.Any())
        {
            return @Html.ValidationMessage(fieldName).ToString();

        }
        else
        {
            return "";

        }

    } 
}

@{
    var myLayout = Model.Layout as TrmLayoutModel;
    if (myLayout == null)
    {
        throw new InvalidCastException(StringConstants.Layout.InvalidLayout);
    }

    var currentUrl = Model.CurrentPage.ContentLink.GetExternalUrl_V2();
    var progressBarViewModel = new ProgressBarViewModel
    {
        Steps = new List<ProgressBarItem> {
            new ProgressBarItem {
                Heading = "Account",
                Number = "1",
                IsComplete = true,
            },
            new ProgressBarItem {
                Heading = "Personal",
                Number = "2",
                Url = string.Format("{0}Step2", currentUrl),
                IsComplete = true,
            },
            new ProgressBarItem {
                Heading = "Verify",
                Number = "3",
                Url = string.Format("{0}Step3", currentUrl),
                IsCurrent =  true,
            },
            new ProgressBarItem {
                Heading = "Security",
                Number = "4",
                Url = string.Format("{0}Step4", currentUrl)
            },
            new ProgressBarItem {
                Heading = "Complete",
                Number = "5",
                Url = string.Format("{0}Step4", currentUrl)
            }
        }
    };

    var FormViewModel = new
    {
        actionUrl = Url.Action("Step3"),

        Step3Heading = Model.CurrentPage.Step3Heading,
        MiddleContentStep3 = @Html.PropertyFor(m => m.CurrentPage.MiddleContentStep3).ToString(),
        Step3ContinueButtonText = Model.CurrentPage.Step3ContinueButtonText,
        Step3BackButtonText = Model.CurrentPage.Step3BackButtonText,
        IsConsumerAccount = Model.ViewModel.IsConsumerAccount,
        TelephoneLabel = Model.CurrentPage.TelephoneLabel,
        TelephoneMessage = Model.CurrentPage.TelephoneMessage,
        TelephonePlaceholder = Model.CurrentPage.TelephonePlaceholder,
        TelephoneRequired = Html.TranslateFallback(StringResources.TelephoneError, "Telephone is required"),
        TelephoneMaxLength = string.Format(Html.TranslateFallback(StringResources.TelephoneMaxlengthError, "Telephone cannot be longer than {0} characters"), 32),
        TelephoneMinLength = string.Format(Html.TranslateFallback(StringResources.TelephoneMinlengthError, "Telephone cannot be shorter than {0} characters"), 8),
        MobileLabel = Model.CurrentPage.MobileLabel,
        MobileMessage = Model.CurrentPage.MobileMessage,
        MobilePlaceholder = Model.CurrentPage.MobilePlaceholder,
        MobilePhoneMaxLength = string.Format(Html.TranslateFallback(StringResources.MobileMaxLengthError, "Mobile cannot be longer than {0} characters"), 32),
        MobilePhoneMinLength = string.Format(Html.TranslateFallback(StringResources.MobileMinLengthError, "Mobile cannot be shorter than {0} characters"), 8),
        TelephoneFormatMessage = Html.TranslateFallback(StringResources.InvalidPhoneNumber, "Please enter correct phone number"),
        CurrencyLabel = Model.CurrentPage.CurrencyLabel,
        CurrencyMessage = Model.CurrentPage.CurrencyMessage,
        CurrencyHoveringMessage = Model.CurrentPage.CurrencyHoveringMessage,
        CurrencyRequired = Html.TranslateFallback(StringResources.CurrencyError, "Currency is required"),
        CurrencyList = Model.ViewModel.CurrencyList,
        Currency = Model.ViewModel.Currency,
        AddressMessage = Model.CurrentPage.AddressMessage,
        AddressQuestionText = Model.CurrentPage.AddressQuestionText,
        AddressPostalCodePlaceholder = Model.CurrentPage.AddressPostalCodePlaceholder,
        AddressLabel = Model.CurrentPage.AddressLabel,
        AddressLine1Label = Model.CurrentPage.Address1Label,
        AddressLine1Placeholder = Model.CurrentPage.Address1Placeholder,
        AddressLine2Label = Model.CurrentPage.Address2Label,
        AddressLine2Placeholder = Model.CurrentPage.Address2Placeholder,
        AddressLine1Required = Html.TranslateFallback(StringResources.ErrorLine1, "Address is required"),
        AddressLine1MaxLength = string.Format(Html.TranslateFallback(StringResources.AddressLineMaxlengthError, "Address cannot be longer than {0} characters"), 80),
        AddressIncomplete = Html.TranslateFallBack(TRM.Shared.Constants.StringResources.AddressIncomplete, "Address is incomplete, please enter manually"),
        AddressLine2MaxLength = string.Format(Html.TranslateFallback(StringResources.AddressLineMaxlengthError, "Address cannot be longer than {0} characters"), 80),
        CountyLabel = Model.CurrentPage.CountyLabel,
        CountyPlaceholder = Model.CurrentPage.CountyPlaceholder,
        CountryLabel = Model.CurrentPage.CountryLabel,
        CityLabel = Model.CurrentPage.CityLabel,
        CityPlaceholder = Model.CurrentPage.CityPlaceholder,
        CityRequired = Html.TranslateFallback(StringResources.RequiredCity, "City is required"),
        CityMaxLength = string.Format(Html.TranslateFallback(StringResources.CityMaxlengthError, "City cannot be longer than {0} characters"), 64),
        CountyMaxLength = string.Format(Html.TranslateFallback(StringResources.CountyMaxlengthError, "County cannot be longer than {0} characters"), 64),
        PostcodeLabel = Model.CurrentPage.PostcodeLabel,
        PostalCodeInvalid = Html.TranslateFallback(StringResources.InvalidPostcode, "Postcode is invalid"),
        PostalCodeRequired = Html.TranslateFallback(StringResources.ErrorPostCode, "Postal Code is required"),
        PostalCodeMaxLength = string.Format(Html.TranslateFallback(StringResources.MaxlengthError, "Postal Code is over {0} signs"), 11),
        CountryCodeRequired = Html.TranslateFallback(StringResources.ErrorCountryCode, "Country is required"),
        CountryList = Model.ViewModel.CountryList,
        PostCodeAnywhereLicense = myLayout.PostcodeAnywhereLicense,
        GeneralErrorMessage = ErrorMessage("viewModel.General"),
        PostalCodeErrorMessage = ErrorMessage("PostalCode"),
        AddressLine1ErrorMessage = ErrorMessage("AddressLine1"),
        AddressLine2ErrorMessage = ErrorMessage("AddressLine2"),
        CountyErrorMessage = ErrorMessage("County"),
        CityErrorMessage = ErrorMessage("City"),
        CountryCodeErrorMessage = ErrorMessage("CountryCode"),
        TelephoneErrorMessage = ErrorMessage("Telephone"),
        MobilePhoneErrorMessage = ErrorMessage("MobilePhone"),
        CurrencyErrorMessage = ErrorMessage("Currency"),
    };
}

<div class="row" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
    @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.TopContent)
</div>

<div class="mod-section">
    @if (!Model.CurrentPage.HideStepProgressBar)
    {
        Html.RenderPartial("RoyalMint2020/_ProgressBar", progressBarViewModel);
    }

    @if (Model.CurrentPage.DisplayPageHeading)
    {
        <h1>@Html.DisplayFor(x => x.CurrentPage.Heading)</h1>
    }

    <div class="row" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
        @Html.DisplayFor(m => m.CurrentPage.ThreeContentAreas.MiddleContent)
    </div>

    @Html.PropertyFor(m => m.CurrentPage.MainBody)

    <div data-module="bullion-checkout-verify-identity" data-settings="@JsonConvert.SerializeObject(FormViewModel)"></div>

    <div class="row" @Html.EditAttributes(m => m.CurrentPage.ThreeContentAreas)>
        @Html.PropertyFor(m => m.CurrentPage.ThreeContentAreas.BottomContent)
    </div>
</div>
