@using EPiServer.ServiceLocation
@using Hephaestus.CMS.Extensions
@using Mediachase.Commerce.Customers
@using StackExchange.Profiling
@using TRM.Web.Constants
@using TRM.Shared.Extensions
@model TRM.Web.Models.Layouts.TrmLayoutModel

<a class="btn touchnav-toggle pull-right hidden-md hidden-lg menu-bars">
    <span></span>
    <span></span>
    <span></span>
    <span></span>
</a>
<nav class="rm-navbar-container pull-right">
    <div class="button-group pull-right-md-up text-right">
        @{
        if (!Model.HideMegaMenuAndSearch)
        {
        <a class="btn hidden-md hidden-lg nav-toggle nav-active" href="#navSectionNav"><i class="trmi trmi-menu"></i></a>
        <a class="btn nav-toggle" href="#navSectionSearch"><i class="trmi trmi-search"></i></a>
        }
        }
        @if (!Model.HideUserAndMiniBasketFromHeader)
        {
       
        <a class="btn nav-toggle" href="#navSectionAccount"><i class="trmi trmi-user"></i></a>
        <a class="btn nav-toggle hidden-xs hidden-sm" ng-click="getBasketSummary()" href="#navSectionBasket" id="miniBaksetButton"><i class="trmi trmi-basket"></i><span ng-cloak ng-if="getBasketQty() >= 1"> (<span ng-cloak ng-show="getBasketQty() >= 1" ng-bind="getBasketQty()"></span>)</span></a>
        <a class="btn visible-xs visible-sm" href="@Model.BasketPage.GetExternalUrl_V2()" id="miniBaksetButton"><i class="trmi trmi-basket"></i><span ng-cloak ng-if="getBasketQty() >= 1"> (<span ng-cloak ng-show="getBasketQty() >= 1" ng-bind="getBasketQty()"></span>)</span></a>
        }
    </div>
    @if (!Model.HideMegaMenuAndSearch)
    {
        if (Model.UseManualMegaMenu)
        {
            @Html.PropertyFor(x => x.ManualMegaMenu)
        }
        else
        {
            <div class="nav-section active pull-left-md pull-left-lg" id="navSectionNav">
                <div class="rm-navbar">
                    @if (Model.MegaMenu != null && Model.MegaMenu.MegaMenuDto != null)
                    {
                        foreach (var tierOneItem in Model.MegaMenu.MegaMenuDto.ChildNavigationItems.Where(i => i.VisibleInNav))
                        {
                            var tierOneHasChildren = tierOneItem.ChildNavigationItems != null && tierOneItem.ChildNavigationItems.Any(i => i.VisibleInNav);
                            var tierOneHasChildrenClass = tierOneHasChildren ? "has-children" : string.Empty;

                            <div class="level0 @tierOneHasChildrenClass">
                                @if (string.IsNullOrEmpty(tierOneItem.MenuItemExternalUrl) || tierOneItem.CurrentBlock.DontOutputLabelWithHyperlink)
                                {
                                    <span class="fauxLink">
                                        @tierOneItem.MenuItemDisplayName
                                    </span>
                                }
                                else
                                {
                                    <a href="@tierOneItem.MenuItemExternalUrl" @(tierOneItem.OpenInANewWindow ? "target=_blank" : string.Empty)>@tierOneItem.MenuItemDisplayName</a>
                                }

                                @if (tierOneHasChildren)
                                {
                                    var hasBanners = tierOneItem.CurrentBlock.MegaMenuLeftContentArea != null && tierOneItem.CurrentBlock.MegaMenuLeftContentArea.Items.Any() ? "hasBanners" : string.Empty;
                                    <div class="nav-dropdown @hasBanners">
                                        @if (tierOneItem.CurrentBlock.MegaMenuLeftContentArea != null && tierOneItem.CurrentBlock.MegaMenuLeftContentArea.Items.Any())
                                        {
                                            <div class="banner-col hidden-xs hidden-sm">
                                                <div>
                                                    @{
                                                        var item = tierOneItem;
                                                    }
                                                    @Html.PropertyFor(x => item.CurrentBlock.MegaMenuLeftContentArea)
                                                </div>
                                            </div>
                                        }
                                        <div class="nav-col">
                                            <div>
                                                @foreach (var tierTwoItem in tierOneItem.ChildNavigationItems.Where(i => i.VisibleInNav))
                                                {
                                                    var tierTwoHasChildren = tierTwoItem.ChildNavigationItems != null && tierTwoItem.ChildNavigationItems.Any(i => i.VisibleInNav);
                                                    var tierTwoHasChildrenClass = tierTwoHasChildren ? "has-children" : string.Empty;

                                                    <div class="level1 @tierTwoHasChildrenClass">
                                                        @if (string.IsNullOrEmpty(tierTwoItem.MenuItemExternalUrl) || tierTwoItem.CurrentBlock.DontOutputLabelWithHyperlink)
                                                        {
                                                            <span class="fauxLink">
                                                                @tierTwoItem.MenuItemDisplayName
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <a href="@tierTwoItem.MenuItemExternalUrl">@tierTwoItem.MenuItemDisplayName</a>
                                                        }
                                                        @if (tierTwoHasChildren)
                                                        {
                                                            <div>
                                                                <div class="list-heading">
                                                                    @tierTwoItem.CurrentBlock.RootLabel<a class="btn nav-close pull-right visible-md visible-lg" role="button"><i class="trmi trmi-close"></i></a>
                                                                </div>
                                                                <div class="row">
                                                                    @{
                                                                        var item = tierTwoItem;
                                                                    }
                                                                    @Html.PropertyFor(c => item.CurrentBlock.MegaMenuContent, new {Tag = StringConstants.MenuRenderingTags.MegaMenu})
                                                                </div>

                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>

                                }
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
    @if (!Model.HideUserAndMiniBasketFromHeader)
    {
        Html.RenderPartial("_SearchBox", Model);
        @Html.Partial("_LoginRegister")
        @Html.Partial("ShoppingBasket/_BullionBasketMini_bullion")
    }
  
    @if (!Model.HideMegaMenuAndSearch)
    {
    <a class="btn nav-close" role="button"><i class="trmi trmi-close"></i></a>
    }
</nav>

@{
    var isLoggedIn = Request.IsAuthenticated;

    CustomerContact contact = null;

    if (isLoggedIn)
    {
        contact = ServiceLocator.Current.GetInstance<CustomerContext>().CurrentContact;
    }
    else
    {
        contact = CustomerContact.CreateInstance();
    }

    var contactFirstName = contact.FirstName ?? string.Empty;
    var contactLastName = contact.LastName ?? string.Empty;
    var contactEmail = contact.Email ?? string.Empty;
}
@if (!Model.HideUserAndMiniBasketFromHeader)
{
    <span ng-controller="rmLogin">
        <div class="account-greeting hidden-xs hidden-sm" id="loggedInWelcomeText" ng-init="setupLogin('@(contactFirstName.Replace("'", "\\'"))', '@(contactLastName.Replace("'", "\\'"))', '@(contactEmail.Replace("'", "\\'"))', @isLoggedIn.ToString().ToLower())" ng-hide="!userLoggedIn" ng-cloak>
            Hello {{user.user.FirstName;}} 
            <a href="javascript:void(0)" ng-click="logout()" class="bold text-black ml-md-1x ml-lg-1x">Logout</a>
        </div>
    </span>
}

