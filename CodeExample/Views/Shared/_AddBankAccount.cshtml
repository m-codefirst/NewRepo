@using EPiServer.Editor
@using EPiServer.Web.Mvc.Html
@using TRM.Web.Extentions
@model Hephaestus.CMS.ViewModels.IPageViewModel<TRM.Web.Models.Pages.Bullion.BullionCustomerBankAccountPage, Hephaestus.CMS.ViewModels.ILayoutModel, TRM.Web.Models.ViewModels.Bullion.CustomerBankAccount.AddOrEditBankAccountViewModel>

@{
    var isEditBankAccountView = ViewData["IsEditBankAccountView"] != null ? (bool)ViewData["IsEditBankAccountView"] : false;
}

@functions
{
    public string GetFeedbackClass(string fieldName, string classes = null)
    {
        var fieldKey = string.Format("viewModel.{0}", fieldName);
        if (ViewData.ModelState[fieldKey] != null && ViewData.ModelState[fieldKey].Errors.Any())
        {
            return string.IsNullOrEmpty(classes) ? "has-feedback ValidationFail" : classes;
        }
        return string.Empty;
    }
}

@helper ErrorMessage(string fieldName, bool isShowFeedbackIcon = true)
{
	var fieldKey = string.Format("viewModel.{0}", fieldName);
	if (ViewData.ModelState[fieldKey] != null && ViewData.ModelState[fieldKey].Errors.Any())
	{
		<span id="bull-email__helpBlock2" class="help-block">@Html.ValidationMessage(fieldKey)</span>
		if (isShowFeedbackIcon)
		{
			<span class="trmi form-control-feedback" aria-hidden="true"></span>
		}
	}
}

<div class="col-md-12 col-lg-9">
    <div class="row">
        @if (!isEditBankAccountView)
        {
            <div class="name mb-1x form-group holder-name @GetFeedbackClass("AccountHolderName")">
                <label class="control-label col-xs-12 col-sm-4">@Html.PropertyFor(x => x.CurrentPage.AccountHolderNameLabel)<span class="text-danger">*</span></label>
                <div class="col-xs-12 col-sm-8">
                    @(isEditBankAccountView ? Html.TextBoxFor(x => x.ViewModel.AccountHolderName, new {@class = "form-control", type = "text", @readonly = "readonly"}) : Html.TextBoxFor(x => x.ViewModel.AccountHolderName, new {@class = "form-control", type = "text"}))
                    @ErrorMessage("AccountHolderName")
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(x => x.ViewModel.AccountHolderName)
        }
        <div class="country">
            <div class="form-group mb-1x @GetFeedbackClass("CountryCode")">
                <label class="col-xs-12 col-sm-4 control-label">@Html.PropertyFor(x => x.CurrentPage.CountryLabel) <span class="text-danger">*</span></label>
                <div class="col-xs-12 col-sm-8">
                    <div class="select-form">
                        @(isEditBankAccountView ?
                              Html.CustomDropDownListFor(x => x.ViewModel.CountryCode, Model.ViewModel.CountryList,
                              new
                              {
                                  @class = "form-control countryCode disabled",
                                  @readonly = "readonly",
                                  data_required = "true",
                                  @value = "@Model.ViewModel.CountryCode"
                              }) :
                              Html.CustomDropDownListFor(x => x.ViewModel.CountryCode, Model.ViewModel.CountryList,
                                  new
                                  {
                                      @class = "form-control countryCode",
                                      data_required = "true",
                                      @value = "@Model.ViewModel.CountryCode"
                                  }))

                        @ErrorMessage("CountryCode")
                    </div>
                </div>
            </div>
        </div>
        <div class="sort-input bank-info mb-1x form-group @GetFeedbackClass("SortCode")">
            <label class="col-xs-12 col-sm-4 control-label">@Html.PropertyFor(x => x.CurrentPage.SortCodeLabel) <span class="text-danger">*</span></label>
            <div class="col-xs-12 col-sm-8">
                <div class="row">
                    @{
                        var sortCodeControlAttributes = (isEditBankAccountView ?
                            (object) new {@class = "form-control", type = "text", @readonly = "readonly"} :
                            (object) new {@class = "form-control sortcode-input", type = "text", @maxlength = "2", @pattern = "[0-9]{2}"});
                    }
                    <div class="col-xs-4">
                        @Html.TextBoxFor(x => x.ViewModel.SortCodePart1, sortCodeControlAttributes)
                    </div>
                    <div class="col-xs-4">
                        @Html.TextBoxFor(x => x.ViewModel.SortCodePart2, sortCodeControlAttributes)
                    </div>
                    <div class="col-xs-4">
                        @Html.TextBoxFor(x => x.ViewModel.SortCodePart3, sortCodeControlAttributes)
                    </div>
                    <div class="clearfix"></div>
                    <div class="col-xs-12">
                        @ErrorMessage("SortCode", false)
                    </div>
                </div>
            </div>
            @Html.HiddenFor(x => x.ViewModel.SortCode)
        </div>
        <div class="iban-input bank-info mb-1x form-group  @GetFeedbackClass("Iban")">
            <label class="control-label col-xs-12 col-sm-4">@Html.PropertyFor(x => x.CurrentPage.IbanLable)<span class="text-danger">*</span></label>
            <div class="col-xs-12 col-sm-8">
                @(isEditBankAccountView ? Html.TextBoxFor(x => x.ViewModel.Iban, new {@class = "form-control", type = "text", @readonly = "readonly"}) : Html.TextBoxFor(x => x.ViewModel.Iban, new {@class = "form-control", type = "text"}))
                @ErrorMessage("Iban")
            </div>
        </div>
        <div class="swift-input bank-info mb-1x form-group @GetFeedbackClass("SwiftOrBic")">
            <label class="control-label col-xs-12 col-sm-4">@Html.PropertyFor(x => x.CurrentPage.SwiftCodeLable)<span class="text-danger">*</span></label>
            <div class="col-xs-12 col-sm-8">
                @(isEditBankAccountView ? Html.TextBoxFor(x => x.ViewModel.SwiftOrBic, new {@class = "form-control", type = "text", @readonly = "readonly"}) : Html.TextBoxFor(x => x.ViewModel.SwiftOrBic, new {@class = "form-control", type = "text"}))
                @ErrorMessage("SwiftOrBic")
            </div>
        </div>
        <div class="account-input mb-1x form-group account-number @GetFeedbackClass("AccountNumber")">
            <label class="control-label col-xs-12 col-sm-4">@Html.PropertyFor(x => x.CurrentPage.AccountNumberLablel) <span class="text-danger">*</span></label>

            <div class="col-xs-12 col-sm-8" ng-init="AccountNumber = '@(!string.IsNullOrEmpty(Model.ViewModel.AccountNumber) ? Model.ViewModel.AccountNumber.Replace("'", " ") : "")'">
                @(isEditBankAccountView ? Html.TextBoxFor(x => x.ViewModel.AccountNumber, new {@class = "form-control", type = "text", @readonly = "readonly", @input_number_only = "true", @ng_model = "AccountNumber"}) : Html.TextBoxFor(x => x.ViewModel.AccountNumber, new {@class = "form-control", type = "text", @input_number_only = "true", @ng_model = "AccountNumber"}))
                @ErrorMessage("AccountNumber")
            </div>
        </div>
        <div class="nickname mb-1x form-group @GetFeedbackClass("Nickname")">
            <label class="control-label col-xs-12 col-sm-4">@Html.PropertyFor(x => x.CurrentPage.AccountNicknameLable) <span class="text-danger">*</span></label>
            <div class="col-xs-12 col-sm-8">
                @Html.TextBoxFor(x => x.ViewModel.Nickname, new {@class = "form-control", type = "text"})
                @ErrorMessage("Nickname")
            </div>
        </div>
    </div>
</div>
<div class="col-lg-6 col-md-9 col-sm-9"></div>
<div class="col-xs-12 col-md-3 col-sm-3 text-right">
    <div class="row">
        <button type="submit" class="btn btn-secondary btn-block">@Html.PropertyFor(x => x.CurrentPage.ActionAddText)</button>
        @Html.HiddenFor(x => x.ViewModel.CustomerBankAccountId)
    </div>
</div>
@if (!string.IsNullOrEmpty(GetFeedbackClass("EnqueMessage")))
{
    <div class="col-xs-12 col-sm-9 mt-1x">
        <div class="row">
            <div class="alert alert-danger text-center mb-0">
                @Html.ValidationMessage("viewModel.EnqueMessage")
            </div>
        </div>
    </div>
}

@if (Model.CurrentPage.EditAccountsContentArea != null || PageEditing.PageIsInEditMode)
{
    <div class="clearfix"></div>
    <div class="row mt-1x">
        @Html.PropertyFor(x => x.CurrentPage.EditAccountsContentArea)
    </div>
}